// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarDataDef.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarDataDef_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarDataDef_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZCHXRadarDataDef_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadarDataDef_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class BoundRect;
class BoundRectDefaultTypeInternal;
extern BoundRectDefaultTypeInternal _BoundRect_default_instance_;
class Latlon;
class LatlonDefaultTypeInternal;
extern LatlonDefaultTypeInternal _Latlon_default_instance_;
class PixelPoint;
class PixelPointDefaultTypeInternal;
extern PixelPointDefaultTypeInternal _PixelPoint_default_instance_;
class PredictionArea;
class PredictionAreaDefaultTypeInternal;
extern PredictionAreaDefaultTypeInternal _PredictionArea_default_instance_;
class RadarRect;
class RadarRectDefaultTypeInternal;
extern RadarRectDefaultTypeInternal _RadarRect_default_instance_;
class RadarRectDef;
class RadarRectDefDefaultTypeInternal;
extern RadarRectDefDefaultTypeInternal _RadarRectDef_default_instance_;
class RadarRects;
class RadarRectsDefaultTypeInternal;
extern RadarRectsDefaultTypeInternal _RadarRects_default_instance_;
class RadarSurfaceTrack;
class RadarSurfaceTrackDefaultTypeInternal;
extern RadarSurfaceTrackDefaultTypeInternal _RadarSurfaceTrack_default_instance_;
class RadarVideoImage;
class RadarVideoImageDefaultTypeInternal;
extern RadarVideoImageDefaultTypeInternal _RadarVideoImage_default_instance_;
class RadarVideoImages;
class RadarVideoImagesDefaultTypeInternal;
extern RadarVideoImagesDefaultTypeInternal _RadarVideoImages_default_instance_;
class RouteNode;
class RouteNodeDefaultTypeInternal;
extern RouteNodeDefaultTypeInternal _RouteNode_default_instance_;
class RouteNodes;
class RouteNodesDefaultTypeInternal;
extern RouteNodesDefaultTypeInternal _RouteNodes_default_instance_;
class RoutePath;
class RoutePathDefaultTypeInternal;
extern RoutePathDefaultTypeInternal _RoutePath_default_instance_;
class Segment;
class SegmentDefaultTypeInternal;
extern SegmentDefaultTypeInternal _Segment_default_instance_;
class TrackPoint;
class TrackPointDefaultTypeInternal;
extern TrackPointDefaultTypeInternal _TrackPoint_default_instance_;
class VideoImage;
class VideoImageDefaultTypeInternal;
extern VideoImageDefaultTypeInternal _VideoImage_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::proto::BoundRect* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::BoundRect>(Arena*);
template<> ::com::zhichenhaixin::proto::Latlon* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(Arena*);
template<> ::com::zhichenhaixin::proto::PixelPoint* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::PixelPoint>(Arena*);
template<> ::com::zhichenhaixin::proto::PredictionArea* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::PredictionArea>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarRect* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRect>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarRectDef* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarRects* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRects>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarSurfaceTrack* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarSurfaceTrack>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarVideoImage* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarVideoImage>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarVideoImages* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarVideoImages>(Arena*);
template<> ::com::zhichenhaixin::proto::RouteNode* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RouteNode>(Arena*);
template<> ::com::zhichenhaixin::proto::RouteNodes* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RouteNodes>(Arena*);
template<> ::com::zhichenhaixin::proto::RoutePath* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RoutePath>(Arena*);
template<> ::com::zhichenhaixin::proto::Segment* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::Segment>(Arena*);
template<> ::com::zhichenhaixin::proto::TrackPoint* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::TrackPoint>(Arena*);
template<> ::com::zhichenhaixin::proto::VideoImage* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::VideoImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace proto {

enum MSGTYP : int {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
constexpr MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
constexpr MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
constexpr int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSGTYP_descriptor();
template<typename T>
inline const std::string& MSGTYP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSGTYP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSGTYP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSGTYP_descriptor(), enum_t_value);
}
inline bool MSGTYP_Parse(
    const std::string& name, MSGTYP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF : int {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
constexpr CNF CNF_MIN = CONFIRMED_TRACK;
constexpr CNF CNF_MAX = UNKNOWN_TRACK;
constexpr int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CNF_descriptor();
template<typename T>
inline const std::string& CNF_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CNF>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CNF_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CNF_descriptor(), enum_t_value);
}
inline bool CNF_Parse(
    const std::string& name, CNF* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST : int {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
constexpr CST CST_MIN = CST_UNDEFINED;
constexpr CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
constexpr int CST_ARRAYSIZE = CST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CST_descriptor();
template<typename T>
inline const std::string& CST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CST_descriptor(), enum_t_value);
}
inline bool CST_Parse(
    const std::string& name, CST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH : int {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
constexpr STH STH_MIN = MEASURED_POSITION;
constexpr STH STH_MAX = SMOOTHED_POSITION;
constexpr int STH_ARRAYSIZE = STH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STH_descriptor();
template<typename T>
inline const std::string& STH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STH_descriptor(), enum_t_value);
}
inline bool STH_Parse(
    const std::string& name, STH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
enum RES : int {
  MONOBIT_RESOLUTION = 1,
  LOW_RESOLUTION = 2,
  MEDIUM_RESOLUTION = 3,
  HIGH_RESOLUTION = 4,
  VERY_HIGH_RESOLUTION = 5,
  ULTRA_HIGH_RESOLUTION = 6
};
bool RES_IsValid(int value);
constexpr RES RES_MIN = MONOBIT_RESOLUTION;
constexpr RES RES_MAX = ULTRA_HIGH_RESOLUTION;
constexpr int RES_ARRAYSIZE = RES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RES_descriptor();
template<typename T>
inline const std::string& RES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RES_descriptor(), enum_t_value);
}
inline bool RES_Parse(
    const std::string& name, RES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RES>(
    RES_descriptor(), name, value);
}
// ===================================================================

class Latlon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.Latlon) */ {
 public:
  inline Latlon() : Latlon(nullptr) {};
  virtual ~Latlon();

  Latlon(const Latlon& from);
  Latlon(Latlon&& from) noexcept
    : Latlon() {
    *this = ::std::move(from);
  }

  inline Latlon& operator=(const Latlon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Latlon& operator=(Latlon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Latlon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Latlon* internal_default_instance() {
    return reinterpret_cast<const Latlon*>(
               &_Latlon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Latlon& a, Latlon& b) {
    a.Swap(&b);
  }
  inline void Swap(Latlon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Latlon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Latlon* New() const final {
    return CreateMaybeMessage<Latlon>(nullptr);
  }

  Latlon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Latlon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Latlon& from);
  void MergeFrom(const Latlon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Latlon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.Latlon";
  }
  protected:
  explicit Latlon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // required double latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Latlon)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class PixelPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.PixelPoint) */ {
 public:
  inline PixelPoint() : PixelPoint(nullptr) {};
  virtual ~PixelPoint();

  PixelPoint(const PixelPoint& from);
  PixelPoint(PixelPoint&& from) noexcept
    : PixelPoint() {
    *this = ::std::move(from);
  }

  inline PixelPoint& operator=(const PixelPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PixelPoint& operator=(PixelPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PixelPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PixelPoint* internal_default_instance() {
    return reinterpret_cast<const PixelPoint*>(
               &_PixelPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PixelPoint& a, PixelPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PixelPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PixelPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PixelPoint* New() const final {
    return CreateMaybeMessage<PixelPoint>(nullptr);
  }

  PixelPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PixelPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PixelPoint& from);
  void MergeFrom(const PixelPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PixelPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.PixelPoint";
  }
  protected:
  explicit PixelPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PixelPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class VideoImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.VideoImage) */ {
 public:
  inline VideoImage() : VideoImage(nullptr) {};
  virtual ~VideoImage();

  VideoImage(const VideoImage& from);
  VideoImage(VideoImage&& from) noexcept
    : VideoImage() {
    *this = ::std::move(from);
  }

  inline VideoImage& operator=(const VideoImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoImage& operator=(VideoImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoImage* internal_default_instance() {
    return reinterpret_cast<const VideoImage*>(
               &_VideoImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VideoImage& a, VideoImage& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoImage* New() const final {
    return CreateMaybeMessage<VideoImage>(nullptr);
  }

  VideoImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoImage& from);
  void MergeFrom(const VideoImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.VideoImage";
  }
  protected:
  explicit VideoImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::com::zhichenhaixin::proto::PixelPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >*
      mutable_points();
  private:
  const ::com::zhichenhaixin::proto::PixelPoint& _internal_points(int index) const;
  ::com::zhichenhaixin::proto::PixelPoint* _internal_add_points();
  public:
  const ::com::zhichenhaixin::proto::PixelPoint& points(int index) const;
  ::com::zhichenhaixin::proto::PixelPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >&
      points() const;

  // required uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VideoImage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint > points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class PredictionArea PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.PredictionArea) */ {
 public:
  inline PredictionArea() : PredictionArea(nullptr) {};
  virtual ~PredictionArea();

  PredictionArea(const PredictionArea& from);
  PredictionArea(PredictionArea&& from) noexcept
    : PredictionArea() {
    *this = ::std::move(from);
  }

  inline PredictionArea& operator=(const PredictionArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionArea& operator=(PredictionArea&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionArea* internal_default_instance() {
    return reinterpret_cast<const PredictionArea*>(
               &_PredictionArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PredictionArea& a, PredictionArea& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionArea* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictionArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionArea* New() const final {
    return CreateMaybeMessage<PredictionArea>(nullptr);
  }

  PredictionArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionArea& from);
  void MergeFrom(const PredictionArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.PredictionArea";
  }
  protected:
  explicit PredictionArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  int area_size() const;
  private:
  int _internal_area_size() const;
  public:
  void clear_area();
  ::com::zhichenhaixin::proto::Latlon* mutable_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
      mutable_area();
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_area(int index) const;
  ::com::zhichenhaixin::proto::Latlon* _internal_add_area();
  public:
  const ::com::zhichenhaixin::proto::Latlon& area(int index) const;
  ::com::zhichenhaixin::proto::Latlon* add_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
      area() const;

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PredictionArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon > area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class Segment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.Segment) */ {
 public:
  inline Segment() : Segment(nullptr) {};
  virtual ~Segment();

  Segment(const Segment& from);
  Segment(Segment&& from) noexcept
    : Segment() {
    *this = ::std::move(from);
  }

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segment& operator=(Segment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segment* internal_default_instance() {
    return reinterpret_cast<const Segment*>(
               &_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Segment& a, Segment& b) {
    a.Swap(&b);
  }
  inline void Swap(Segment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Segment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segment* New() const final {
    return CreateMaybeMessage<Segment>(nullptr);
  }

  Segment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.Segment";
  }
  protected:
  explicit Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // required .com.zhichenhaixin.proto.Latlon start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::com::zhichenhaixin::proto::Latlon& start() const;
  ::com::zhichenhaixin::proto::Latlon* release_start();
  ::com::zhichenhaixin::proto::Latlon* mutable_start();
  void set_allocated_start(::com::zhichenhaixin::proto::Latlon* start);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_start() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::com::zhichenhaixin::proto::Latlon* start);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_start();

  // required .com.zhichenhaixin.proto.Latlon end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::com::zhichenhaixin::proto::Latlon& end() const;
  ::com::zhichenhaixin::proto::Latlon* release_end();
  ::com::zhichenhaixin::proto::Latlon* mutable_end();
  void set_allocated_end(::com::zhichenhaixin::proto::Latlon* end);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_end() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::com::zhichenhaixin::proto::Latlon* end);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_end();

  // optional double angle = 3;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Segment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::zhichenhaixin::proto::Latlon* start_;
  ::com::zhichenhaixin::proto::Latlon* end_;
  double angle_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class BoundRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.BoundRect) */ {
 public:
  inline BoundRect() : BoundRect(nullptr) {};
  virtual ~BoundRect();

  BoundRect(const BoundRect& from);
  BoundRect(BoundRect&& from) noexcept
    : BoundRect() {
    *this = ::std::move(from);
  }

  inline BoundRect& operator=(const BoundRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundRect& operator=(BoundRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundRect* internal_default_instance() {
    return reinterpret_cast<const BoundRect*>(
               &_BoundRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoundRect& a, BoundRect& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundRect* New() const final {
    return CreateMaybeMessage<BoundRect>(nullptr);
  }

  BoundRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundRect& from);
  void MergeFrom(const BoundRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.BoundRect";
  }
  protected:
  explicit BoundRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftFieldNumber = 1,
    kBottomRightFieldNumber = 2,
    kDiameterFieldNumber = 3,
  };
  // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
  bool has_topleft() const;
  private:
  bool _internal_has_topleft() const;
  public:
  void clear_topleft();
  const ::com::zhichenhaixin::proto::Latlon& topleft() const;
  ::com::zhichenhaixin::proto::Latlon* release_topleft();
  ::com::zhichenhaixin::proto::Latlon* mutable_topleft();
  void set_allocated_topleft(::com::zhichenhaixin::proto::Latlon* topleft);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_topleft() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_topleft();
  public:
  void unsafe_arena_set_allocated_topleft(
      ::com::zhichenhaixin::proto::Latlon* topleft);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_topleft();

  // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
  bool has_bottomright() const;
  private:
  bool _internal_has_bottomright() const;
  public:
  void clear_bottomright();
  const ::com::zhichenhaixin::proto::Latlon& bottomright() const;
  ::com::zhichenhaixin::proto::Latlon* release_bottomright();
  ::com::zhichenhaixin::proto::Latlon* mutable_bottomright();
  void set_allocated_bottomright(::com::zhichenhaixin::proto::Latlon* bottomright);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_bottomright() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_bottomright();
  public:
  void unsafe_arena_set_allocated_bottomright(
      ::com::zhichenhaixin::proto::Latlon* bottomright);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_bottomright();

  // optional int32 diameter = 3;
  bool has_diameter() const;
  private:
  bool _internal_has_diameter() const;
  public:
  void clear_diameter();
  ::PROTOBUF_NAMESPACE_ID::int32 diameter() const;
  void set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diameter() const;
  void _internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BoundRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::zhichenhaixin::proto::Latlon* topleft_;
  ::com::zhichenhaixin::proto::Latlon* bottomright_;
  ::PROTOBUF_NAMESPACE_ID::int32 diameter_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarRectDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRectDef) */ {
 public:
  inline RadarRectDef() : RadarRectDef(nullptr) {};
  virtual ~RadarRectDef();

  RadarRectDef(const RadarRectDef& from);
  RadarRectDef(RadarRectDef&& from) noexcept
    : RadarRectDef() {
    *this = ::std::move(from);
  }

  inline RadarRectDef& operator=(const RadarRectDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRectDef& operator=(RadarRectDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRectDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRectDef* internal_default_instance() {
    return reinterpret_cast<const RadarRectDef*>(
               &_RadarRectDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RadarRectDef& a, RadarRectDef& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRectDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRectDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRectDef* New() const final {
    return CreateMaybeMessage<RadarRectDef>(nullptr);
  }

  RadarRectDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRectDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRectDef& from);
  void MergeFrom(const RadarRectDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRectDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRectDef";
  }
  protected:
  explicit RadarRectDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutlineFieldNumber = 8,
    kCenterFieldNumber = 2,
    kBoundRectFieldNumber = 9,
    kSegFieldNumber = 10,
    kFixedImgFieldNumber = 11,
    kPredictionFieldNumber = 12,
    kRectNumberFieldNumber = 1,
    kUpdateTimeFieldNumber = 3,
    kSogKnotFieldNumber = 5,
    kSogMSFieldNumber = 6,
    kCogFieldNumber = 7,
    kRealDataFieldNumber = 4,
    kVideoCycleIndexFieldNumber = 13,
  };
  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  int outline_size() const;
  private:
  int _internal_outline_size() const;
  public:
  void clear_outline();
  ::com::zhichenhaixin::proto::Latlon* mutable_outline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
      mutable_outline();
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_outline(int index) const;
  ::com::zhichenhaixin::proto::Latlon* _internal_add_outline();
  public:
  const ::com::zhichenhaixin::proto::Latlon& outline(int index) const;
  ::com::zhichenhaixin::proto::Latlon* add_outline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
      outline() const;

  // required .com.zhichenhaixin.proto.Latlon center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::com::zhichenhaixin::proto::Latlon& center() const;
  ::com::zhichenhaixin::proto::Latlon* release_center();
  ::com::zhichenhaixin::proto::Latlon* mutable_center();
  void set_allocated_center(::com::zhichenhaixin::proto::Latlon* center);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_center() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::com::zhichenhaixin::proto::Latlon* center);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_center();

  // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
  bool has_boundrect() const;
  private:
  bool _internal_has_boundrect() const;
  public:
  void clear_boundrect();
  const ::com::zhichenhaixin::proto::BoundRect& boundrect() const;
  ::com::zhichenhaixin::proto::BoundRect* release_boundrect();
  ::com::zhichenhaixin::proto::BoundRect* mutable_boundrect();
  void set_allocated_boundrect(::com::zhichenhaixin::proto::BoundRect* boundrect);
  private:
  const ::com::zhichenhaixin::proto::BoundRect& _internal_boundrect() const;
  ::com::zhichenhaixin::proto::BoundRect* _internal_mutable_boundrect();
  public:
  void unsafe_arena_set_allocated_boundrect(
      ::com::zhichenhaixin::proto::BoundRect* boundrect);
  ::com::zhichenhaixin::proto::BoundRect* unsafe_arena_release_boundrect();

  // optional .com.zhichenhaixin.proto.Segment seg = 10;
  bool has_seg() const;
  private:
  bool _internal_has_seg() const;
  public:
  void clear_seg();
  const ::com::zhichenhaixin::proto::Segment& seg() const;
  ::com::zhichenhaixin::proto::Segment* release_seg();
  ::com::zhichenhaixin::proto::Segment* mutable_seg();
  void set_allocated_seg(::com::zhichenhaixin::proto::Segment* seg);
  private:
  const ::com::zhichenhaixin::proto::Segment& _internal_seg() const;
  ::com::zhichenhaixin::proto::Segment* _internal_mutable_seg();
  public:
  void unsafe_arena_set_allocated_seg(
      ::com::zhichenhaixin::proto::Segment* seg);
  ::com::zhichenhaixin::proto::Segment* unsafe_arena_release_seg();

  // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
  bool has_fixedimg() const;
  private:
  bool _internal_has_fixedimg() const;
  public:
  void clear_fixedimg();
  const ::com::zhichenhaixin::proto::VideoImage& fixedimg() const;
  ::com::zhichenhaixin::proto::VideoImage* release_fixedimg();
  ::com::zhichenhaixin::proto::VideoImage* mutable_fixedimg();
  void set_allocated_fixedimg(::com::zhichenhaixin::proto::VideoImage* fixedimg);
  private:
  const ::com::zhichenhaixin::proto::VideoImage& _internal_fixedimg() const;
  ::com::zhichenhaixin::proto::VideoImage* _internal_mutable_fixedimg();
  public:
  void unsafe_arena_set_allocated_fixedimg(
      ::com::zhichenhaixin::proto::VideoImage* fixedimg);
  ::com::zhichenhaixin::proto::VideoImage* unsafe_arena_release_fixedimg();

  // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
  bool has_prediction() const;
  private:
  bool _internal_has_prediction() const;
  public:
  void clear_prediction();
  const ::com::zhichenhaixin::proto::PredictionArea& prediction() const;
  ::com::zhichenhaixin::proto::PredictionArea* release_prediction();
  ::com::zhichenhaixin::proto::PredictionArea* mutable_prediction();
  void set_allocated_prediction(::com::zhichenhaixin::proto::PredictionArea* prediction);
  private:
  const ::com::zhichenhaixin::proto::PredictionArea& _internal_prediction() const;
  ::com::zhichenhaixin::proto::PredictionArea* _internal_mutable_prediction();
  public:
  void unsafe_arena_set_allocated_prediction(
      ::com::zhichenhaixin::proto::PredictionArea* prediction);
  ::com::zhichenhaixin::proto::PredictionArea* unsafe_arena_release_prediction();

  // required uint32 rectNumber = 1;
  bool has_rectnumber() const;
  private:
  bool _internal_has_rectnumber() const;
  public:
  void clear_rectnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 rectnumber() const;
  void set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rectnumber() const;
  void _internal_set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 updateTime = 3;
  bool has_updatetime() const;
  private:
  bool _internal_has_updatetime() const;
  public:
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double sogKnot = 5;
  bool has_sogknot() const;
  private:
  bool _internal_has_sogknot() const;
  public:
  void clear_sogknot();
  double sogknot() const;
  void set_sogknot(double value);
  private:
  double _internal_sogknot() const;
  void _internal_set_sogknot(double value);
  public:

  // required double sogMS = 6;
  bool has_sogms() const;
  private:
  bool _internal_has_sogms() const;
  public:
  void clear_sogms();
  double sogms() const;
  void set_sogms(double value);
  private:
  double _internal_sogms() const;
  void _internal_set_sogms(double value);
  public:

  // required double cog = 7;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  double cog() const;
  void set_cog(double value);
  private:
  double _internal_cog() const;
  void _internal_set_cog(double value);
  public:

  // required bool realData = 4;
  bool has_realdata() const;
  private:
  bool _internal_has_realdata() const;
  public:
  void clear_realdata();
  bool realdata() const;
  void set_realdata(bool value);
  private:
  bool _internal_realdata() const;
  void _internal_set_realdata(bool value);
  public:

  // optional int32 videoCycleIndex = 13;
  bool has_videocycleindex() const;
  private:
  bool _internal_has_videocycleindex() const;
  public:
  void clear_videocycleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 videocycleindex() const;
  void set_videocycleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_videocycleindex() const;
  void _internal_set_videocycleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRectDef)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon > outline_;
  ::com::zhichenhaixin::proto::Latlon* center_;
  ::com::zhichenhaixin::proto::BoundRect* boundrect_;
  ::com::zhichenhaixin::proto::Segment* seg_;
  ::com::zhichenhaixin::proto::VideoImage* fixedimg_;
  ::com::zhichenhaixin::proto::PredictionArea* prediction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rectnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime_;
  double sogknot_;
  double sogms_;
  double cog_;
  bool realdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 videocycleindex_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RoutePath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RoutePath) */ {
 public:
  inline RoutePath() : RoutePath(nullptr) {};
  virtual ~RoutePath();

  RoutePath(const RoutePath& from);
  RoutePath(RoutePath&& from) noexcept
    : RoutePath() {
    *this = ::std::move(from);
  }

  inline RoutePath& operator=(const RoutePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePath& operator=(RoutePath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutePath* internal_default_instance() {
    return reinterpret_cast<const RoutePath*>(
               &_RoutePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoutePath& a, RoutePath& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutePath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutePath* New() const final {
    return CreateMaybeMessage<RoutePath>(nullptr);
  }

  RoutePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutePath& from);
  void MergeFrom(const RoutePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RoutePath";
  }
  protected:
  explicit RoutePath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_path();
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_path(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_add_path();
  public:
  const ::com::zhichenhaixin::proto::RadarRectDef& path(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      path() const;

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RoutePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RouteNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RouteNode) */ {
 public:
  inline RouteNode() : RouteNode(nullptr) {};
  virtual ~RouteNode();

  RouteNode(const RouteNode& from);
  RouteNode(RouteNode&& from) noexcept
    : RouteNode() {
    *this = ::std::move(from);
  }

  inline RouteNode& operator=(const RouteNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNode& operator=(RouteNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteNode* internal_default_instance() {
    return reinterpret_cast<const RouteNode*>(
               &_RouteNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RouteNode& a, RouteNode& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteNode* New() const final {
    return CreateMaybeMessage<RouteNode>(nullptr);
  }

  RouteNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteNode& from);
  void MergeFrom(const RouteNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RouteNode";
  }
  protected:
  explicit RouteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathListFieldNumber = 3,
    kTopNodeFieldNumber = 2,
    kNodeNumFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  int path_list_size() const;
  private:
  int _internal_path_list_size() const;
  public:
  void clear_path_list();
  ::com::zhichenhaixin::proto::RoutePath* mutable_path_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
      mutable_path_list();
  private:
  const ::com::zhichenhaixin::proto::RoutePath& _internal_path_list(int index) const;
  ::com::zhichenhaixin::proto::RoutePath* _internal_add_path_list();
  public:
  const ::com::zhichenhaixin::proto::RoutePath& path_list(int index) const;
  ::com::zhichenhaixin::proto::RoutePath* add_path_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
      path_list() const;

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  bool has_top_node() const;
  private:
  bool _internal_has_top_node() const;
  public:
  void clear_top_node();
  const ::com::zhichenhaixin::proto::RadarRectDef& top_node() const;
  ::com::zhichenhaixin::proto::RadarRectDef* release_top_node();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_top_node();
  void set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node);
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_top_node() const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_mutable_top_node();
  public:
  void unsafe_arena_set_allocated_top_node(
      ::com::zhichenhaixin::proto::RadarRectDef* top_node);
  ::com::zhichenhaixin::proto::RadarRectDef* unsafe_arena_release_top_node();

  // required int32 node_num = 1;
  bool has_node_num() const;
  private:
  bool _internal_has_node_num() const;
  public:
  void clear_node_num();
  ::PROTOBUF_NAMESPACE_ID::int32 node_num() const;
  void set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_num() const;
  void _internal_set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath > path_list_;
  ::com::zhichenhaixin::proto::RadarRectDef* top_node_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_num_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RouteNodes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RouteNodes) */ {
 public:
  inline RouteNodes() : RouteNodes(nullptr) {};
  virtual ~RouteNodes();

  RouteNodes(const RouteNodes& from);
  RouteNodes(RouteNodes&& from) noexcept
    : RouteNodes() {
    *this = ::std::move(from);
  }

  inline RouteNodes& operator=(const RouteNodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteNodes& operator=(RouteNodes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteNodes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteNodes* internal_default_instance() {
    return reinterpret_cast<const RouteNodes*>(
               &_RouteNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RouteNodes& a, RouteNodes& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteNodes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteNodes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteNodes* New() const final {
    return CreateMaybeMessage<RouteNodes>(nullptr);
  }

  RouteNodes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteNodes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteNodes& from);
  void MergeFrom(const RouteNodes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteNodes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RouteNodes";
  }
  protected:
  explicit RouteNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeListFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  int node_list_size() const;
  private:
  int _internal_node_list_size() const;
  public:
  void clear_node_list();
  ::com::zhichenhaixin::proto::RouteNode* mutable_node_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
      mutable_node_list();
  private:
  const ::com::zhichenhaixin::proto::RouteNode& _internal_node_list(int index) const;
  ::com::zhichenhaixin::proto::RouteNode* _internal_add_node_list();
  public:
  const ::com::zhichenhaixin::proto::RouteNode& node_list(int index) const;
  ::com::zhichenhaixin::proto::RouteNode* add_node_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
      node_list() const;

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNodes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode > node_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRect) */ {
 public:
  inline RadarRect() : RadarRect(nullptr) {};
  virtual ~RadarRect();

  RadarRect(const RadarRect& from);
  RadarRect(RadarRect&& from) noexcept
    : RadarRect() {
    *this = ::std::move(from);
  }

  inline RadarRect& operator=(const RadarRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRect& operator=(RadarRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRect* internal_default_instance() {
    return reinterpret_cast<const RadarRect*>(
               &_RadarRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RadarRect& a, RadarRect& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRect* New() const final {
    return CreateMaybeMessage<RadarRect>(nullptr);
  }

  RadarRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRect& from);
  void MergeFrom(const RadarRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRect";
  }
  protected:
  explicit RadarRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryRectListFieldNumber = 2,
    kCurrentRectFieldNumber = 1,
    kDirConfirmedFieldNumber = 3,
    kCurEstCountFieldNumber = 4,
    kNodeNumFieldNumber = 5,
  };
  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  int history_rect_list_size() const;
  private:
  int _internal_history_rect_list_size() const;
  public:
  void clear_history_rect_list();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_history_rect_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_history_rect_list();
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_history_rect_list(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_add_history_rect_list();
  public:
  const ::com::zhichenhaixin::proto::RadarRectDef& history_rect_list(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* add_history_rect_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      history_rect_list() const;

  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  bool has_current_rect() const;
  private:
  bool _internal_has_current_rect() const;
  public:
  void clear_current_rect();
  const ::com::zhichenhaixin::proto::RadarRectDef& current_rect() const;
  ::com::zhichenhaixin::proto::RadarRectDef* release_current_rect();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_current_rect();
  void set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect);
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_current_rect() const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_mutable_current_rect();
  public:
  void unsafe_arena_set_allocated_current_rect(
      ::com::zhichenhaixin::proto::RadarRectDef* current_rect);
  ::com::zhichenhaixin::proto::RadarRectDef* unsafe_arena_release_current_rect();

  // required bool dir_confirmed = 3;
  bool has_dir_confirmed() const;
  private:
  bool _internal_has_dir_confirmed() const;
  public:
  void clear_dir_confirmed();
  bool dir_confirmed() const;
  void set_dir_confirmed(bool value);
  private:
  bool _internal_dir_confirmed() const;
  void _internal_set_dir_confirmed(bool value);
  public:

  // required uint32 cur_est_count = 4;
  bool has_cur_est_count() const;
  private:
  bool _internal_has_cur_est_count() const;
  public:
  void clear_cur_est_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_est_count() const;
  void set_cur_est_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cur_est_count() const;
  void _internal_set_cur_est_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 node_num = 5;
  bool has_node_num() const;
  private:
  bool _internal_has_node_num() const;
  public:
  void clear_node_num();
  ::PROTOBUF_NAMESPACE_ID::int32 node_num() const;
  void set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_num() const;
  void _internal_set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > history_rect_list_;
  ::com::zhichenhaixin::proto::RadarRectDef* current_rect_;
  bool dir_confirmed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cur_est_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_num_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarRects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRects) */ {
 public:
  inline RadarRects() : RadarRects(nullptr) {};
  virtual ~RadarRects();

  RadarRects(const RadarRects& from);
  RadarRects(RadarRects&& from) noexcept
    : RadarRects() {
    *this = ::std::move(from);
  }

  inline RadarRects& operator=(const RadarRects& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRects& operator=(RadarRects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRects* internal_default_instance() {
    return reinterpret_cast<const RadarRects*>(
               &_RadarRects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RadarRects& a, RadarRects& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRects* New() const final {
    return CreateMaybeMessage<RadarRects>(nullptr);
  }

  RadarRects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRects& from);
  void MergeFrom(const RadarRects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRects";
  }
  protected:
  explicit RadarRects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectListFieldNumber = 3,
    kUTCFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  int rect_list_size() const;
  private:
  int _internal_rect_list_size() const;
  public:
  void clear_rect_list();
  ::com::zhichenhaixin::proto::RadarRect* mutable_rect_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
      mutable_rect_list();
  private:
  const ::com::zhichenhaixin::proto::RadarRect& _internal_rect_list(int index) const;
  ::com::zhichenhaixin::proto::RadarRect* _internal_add_rect_list();
  public:
  const ::com::zhichenhaixin::proto::RadarRect& rect_list(int index) const;
  ::com::zhichenhaixin::proto::RadarRect* add_rect_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
      rect_list() const;

  // required uint64 UTC = 1;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRects)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect > rect_list_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class TrackPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.TrackPoint) */ {
 public:
  inline TrackPoint() : TrackPoint(nullptr) {};
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);
  TrackPoint(TrackPoint&& from) noexcept
    : TrackPoint() {
    *this = ::std::move(from);
  }

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPoint& operator=(TrackPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackPoint* internal_default_instance() {
    return reinterpret_cast<const TrackPoint*>(
               &_TrackPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TrackPoint& a, TrackPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackPoint* New() const final {
    return CreateMaybeMessage<TrackPoint>(nullptr);
  }

  TrackPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.TrackPoint";
  }
  protected:
  explicit TrackPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracksFieldNumber = 4,
    kRadarSiteIDFieldNumber = 1,
    kObjNameFieldNumber = 7,
    kCurrentFieldNumber = 3,
    kTrackNumberFieldNumber = 2,
    kTrackConfirmedFieldNumber = 5,
    kObjTypeFieldNumber = 6,
  };
  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;
  public:
  void clear_tracks();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_tracks();
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_tracks(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_add_tracks();
  public:
  const ::com::zhichenhaixin::proto::RadarRectDef& tracks(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      tracks() const;

  // required string radarSiteID = 1;
  bool has_radarsiteid() const;
  private:
  bool _internal_has_radarsiteid() const;
  public:
  void clear_radarsiteid();
  const std::string& radarsiteid() const;
  void set_radarsiteid(const std::string& value);
  void set_radarsiteid(std::string&& value);
  void set_radarsiteid(const char* value);
  void set_radarsiteid(const char* value, size_t size);
  std::string* mutable_radarsiteid();
  std::string* release_radarsiteid();
  void set_allocated_radarsiteid(std::string* radarsiteid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarsiteid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarsiteid(
      std::string* radarsiteid);
  private:
  const std::string& _internal_radarsiteid() const;
  void _internal_set_radarsiteid(const std::string& value);
  std::string* _internal_mutable_radarsiteid();
  public:

  // optional string objName = 7;
  bool has_objname() const;
  private:
  bool _internal_has_objname() const;
  public:
  void clear_objname();
  const std::string& objname() const;
  void set_objname(const std::string& value);
  void set_objname(std::string&& value);
  void set_objname(const char* value);
  void set_objname(const char* value, size_t size);
  std::string* mutable_objname();
  std::string* release_objname();
  void set_allocated_objname(std::string* objname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_objname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_objname(
      std::string* objname);
  private:
  const std::string& _internal_objname() const;
  void _internal_set_objname(const std::string& value);
  std::string* _internal_mutable_objname();
  public:

  // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  const ::com::zhichenhaixin::proto::RadarRectDef& current() const;
  ::com::zhichenhaixin::proto::RadarRectDef* release_current();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_current();
  void set_allocated_current(::com::zhichenhaixin::proto::RadarRectDef* current);
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_current() const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_mutable_current();
  public:
  void unsafe_arena_set_allocated_current(
      ::com::zhichenhaixin::proto::RadarRectDef* current);
  ::com::zhichenhaixin::proto::RadarRectDef* unsafe_arena_release_current();

  // required uint32 trackNumber = 2;
  bool has_tracknumber() const;
  private:
  bool _internal_has_tracknumber() const;
  public:
  void clear_tracknumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber() const;
  void set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tracknumber() const;
  void _internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool trackConfirmed = 5;
  bool has_trackconfirmed() const;
  private:
  bool _internal_has_trackconfirmed() const;
  public:
  void clear_trackconfirmed();
  bool trackconfirmed() const;
  void set_trackconfirmed(bool value);
  private:
  bool _internal_trackconfirmed() const;
  void _internal_set_trackconfirmed(bool value);
  public:

  // optional int32 objType = 6;
  bool has_objtype() const;
  private:
  bool _internal_has_objtype() const;
  public:
  void clear_objtype();
  ::PROTOBUF_NAMESPACE_ID::int32 objtype() const;
  void set_objtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_objtype() const;
  void _internal_set_objtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.TrackPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > tracks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarsiteid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objname_;
  ::com::zhichenhaixin::proto::RadarRectDef* current_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber_;
  bool trackconfirmed_;
  ::PROTOBUF_NAMESPACE_ID::int32 objtype_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarSurfaceTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarSurfaceTrack) */ {
 public:
  inline RadarSurfaceTrack() : RadarSurfaceTrack(nullptr) {};
  virtual ~RadarSurfaceTrack();

  RadarSurfaceTrack(const RadarSurfaceTrack& from);
  RadarSurfaceTrack(RadarSurfaceTrack&& from) noexcept
    : RadarSurfaceTrack() {
    *this = ::std::move(from);
  }

  inline RadarSurfaceTrack& operator=(const RadarSurfaceTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarSurfaceTrack& operator=(RadarSurfaceTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarSurfaceTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarSurfaceTrack* internal_default_instance() {
    return reinterpret_cast<const RadarSurfaceTrack*>(
               &_RadarSurfaceTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RadarSurfaceTrack& a, RadarSurfaceTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarSurfaceTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarSurfaceTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarSurfaceTrack* New() const final {
    return CreateMaybeMessage<RadarSurfaceTrack>(nullptr);
  }

  RadarSurfaceTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarSurfaceTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarSurfaceTrack& from);
  void MergeFrom(const RadarSurfaceTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarSurfaceTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarSurfaceTrack";
  }
  protected:
  explicit RadarSurfaceTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackPointsFieldNumber = 5,
    kSourceIdFieldNumber = 2,
    kFlagFieldNumber = 1,
    kLengthFieldNumber = 4,
    kUTCFieldNumber = 3,
  };
  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  int trackpoints_size() const;
  private:
  int _internal_trackpoints_size() const;
  public:
  void clear_trackpoints();
  ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();
  private:
  const ::com::zhichenhaixin::proto::TrackPoint& _internal_trackpoints(int index) const;
  ::com::zhichenhaixin::proto::TrackPoint* _internal_add_trackpoints();
  public:
  const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;

  // required string sourceId = 2;
  bool has_sourceid() const;
  private:
  bool _internal_has_sourceid() const;
  public:
  void clear_sourceid();
  const std::string& sourceid() const;
  void set_sourceid(const std::string& value);
  void set_sourceid(std::string&& value);
  void set_sourceid(const char* value);
  void set_sourceid(const char* value, size_t size);
  std::string* mutable_sourceid();
  std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sourceid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sourceid(
      std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // required int32 flag = 1;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 UTC = 3;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarSurfaceTrack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarVideoImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarVideoImage) */ {
 public:
  inline RadarVideoImage() : RadarVideoImage(nullptr) {};
  virtual ~RadarVideoImage();

  RadarVideoImage(const RadarVideoImage& from);
  RadarVideoImage(RadarVideoImage&& from) noexcept
    : RadarVideoImage() {
    *this = ::std::move(from);
  }

  inline RadarVideoImage& operator=(const RadarVideoImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarVideoImage& operator=(RadarVideoImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarVideoImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarVideoImage* internal_default_instance() {
    return reinterpret_cast<const RadarVideoImage*>(
               &_RadarVideoImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RadarVideoImage& a, RadarVideoImage& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarVideoImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarVideoImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarVideoImage* New() const final {
    return CreateMaybeMessage<RadarVideoImage>(nullptr);
  }

  RadarVideoImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarVideoImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarVideoImage& from);
  void MergeFrom(const RadarVideoImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarVideoImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarVideoImage";
  }
  protected:
  explicit RadarVideoImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadarIdFieldNumber = 1,
    kRadarNameFieldNumber = 3,
    kImageDataFieldNumber = 6,
    kCenterFieldNumber = 4,
    kChannelIdFieldNumber = 2,
    kWidthFieldNumber = 7,
    kUtcFieldNumber = 5,
    kRadiusFieldNumber = 9,
    kHeightFieldNumber = 8,
  };
  // required string radarId = 1;
  bool has_radarid() const;
  private:
  bool _internal_has_radarid() const;
  public:
  void clear_radarid();
  const std::string& radarid() const;
  void set_radarid(const std::string& value);
  void set_radarid(std::string&& value);
  void set_radarid(const char* value);
  void set_radarid(const char* value, size_t size);
  std::string* mutable_radarid();
  std::string* release_radarid();
  void set_allocated_radarid(std::string* radarid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarid(
      std::string* radarid);
  private:
  const std::string& _internal_radarid() const;
  void _internal_set_radarid(const std::string& value);
  std::string* _internal_mutable_radarid();
  public:

  // required string radarName = 3;
  bool has_radarname() const;
  private:
  bool _internal_has_radarname() const;
  public:
  void clear_radarname();
  const std::string& radarname() const;
  void set_radarname(const std::string& value);
  void set_radarname(std::string&& value);
  void set_radarname(const char* value);
  void set_radarname(const char* value, size_t size);
  std::string* mutable_radarname();
  std::string* release_radarname();
  void set_allocated_radarname(std::string* radarname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarname(
      std::string* radarname);
  private:
  const std::string& _internal_radarname() const;
  void _internal_set_radarname(const std::string& value);
  std::string* _internal_mutable_radarname();
  public:

  // required bytes imageData = 6;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagedata(
      std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required .com.zhichenhaixin.proto.Latlon center = 4;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::com::zhichenhaixin::proto::Latlon& center() const;
  ::com::zhichenhaixin::proto::Latlon* release_center();
  ::com::zhichenhaixin::proto::Latlon* mutable_center();
  void set_allocated_center(::com::zhichenhaixin::proto::Latlon* center);
  private:
  const ::com::zhichenhaixin::proto::Latlon& _internal_center() const;
  ::com::zhichenhaixin::proto::Latlon* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::com::zhichenhaixin::proto::Latlon* center);
  ::com::zhichenhaixin::proto::Latlon* unsafe_arena_release_center();

  // required int32 channelId = 2;
  bool has_channelid() const;
  private:
  bool _internal_has_channelid() const;
  public:
  void clear_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 channelid() const;
  void set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channelid() const;
  void _internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 width = 7;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint64 utc = 5;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double radius = 9;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // required uint32 height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoImage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::com::zhichenhaixin::proto::Latlon* center_;
  ::PROTOBUF_NAMESPACE_ID::int32 channelid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// -------------------------------------------------------------------

class RadarVideoImages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarVideoImages) */ {
 public:
  inline RadarVideoImages() : RadarVideoImages(nullptr) {};
  virtual ~RadarVideoImages();

  RadarVideoImages(const RadarVideoImages& from);
  RadarVideoImages(RadarVideoImages&& from) noexcept
    : RadarVideoImages() {
    *this = ::std::move(from);
  }

  inline RadarVideoImages& operator=(const RadarVideoImages& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarVideoImages& operator=(RadarVideoImages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarVideoImages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarVideoImages* internal_default_instance() {
    return reinterpret_cast<const RadarVideoImages*>(
               &_RadarVideoImages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RadarVideoImages& a, RadarVideoImages& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarVideoImages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarVideoImages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarVideoImages* New() const final {
    return CreateMaybeMessage<RadarVideoImages>(nullptr);
  }

  RadarVideoImages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarVideoImages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarVideoImages& from);
  void MergeFrom(const RadarVideoImages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarVideoImages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarVideoImages";
  }
  protected:
  explicit RadarVideoImages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarDataDef_2eproto);
    return ::descriptor_table_ZCHXRadarDataDef_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kUtcFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.RadarVideoImage images = 2;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::com::zhichenhaixin::proto::RadarVideoImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarVideoImage >*
      mutable_images();
  private:
  const ::com::zhichenhaixin::proto::RadarVideoImage& _internal_images(int index) const;
  ::com::zhichenhaixin::proto::RadarVideoImage* _internal_add_images();
  public:
  const ::com::zhichenhaixin::proto::RadarVideoImage& images(int index) const;
  ::com::zhichenhaixin::proto::RadarVideoImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarVideoImage >&
      images() const;

  // required uint64 utc = 1;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoImages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarVideoImage > images_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXRadarDataDef_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Latlon

// required double latitude = 1;
inline bool Latlon::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Latlon::has_latitude() const {
  return _internal_has_latitude();
}
inline void Latlon::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Latlon::_internal_latitude() const {
  return latitude_;
}
inline double Latlon::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Latlon.latitude)
  return _internal_latitude();
}
inline void Latlon::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
}
inline void Latlon::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Latlon.latitude)
}

// required double longitude = 2;
inline bool Latlon::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Latlon::has_longitude() const {
  return _internal_has_longitude();
}
inline void Latlon::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Latlon::_internal_longitude() const {
  return longitude_;
}
inline double Latlon::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Latlon.longitude)
  return _internal_longitude();
}
inline void Latlon::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
}
inline void Latlon::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Latlon.longitude)
}

// -------------------------------------------------------------------

// PixelPoint

// required uint32 x = 1;
inline bool PixelPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PixelPoint::has_x() const {
  return _internal_has_x();
}
inline void PixelPoint::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PixelPoint::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PixelPoint::x() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PixelPoint.x)
  return _internal_x();
}
inline void PixelPoint::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PixelPoint::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PixelPoint.x)
}

// required uint32 y = 2;
inline bool PixelPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PixelPoint::has_y() const {
  return _internal_has_y();
}
inline void PixelPoint::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PixelPoint::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PixelPoint::y() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PixelPoint.y)
  return _internal_y();
}
inline void PixelPoint::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PixelPoint::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PixelPoint.y)
}

// -------------------------------------------------------------------

// VideoImage

// required uint32 width = 1;
inline bool VideoImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoImage::has_width() const {
  return _internal_has_width();
}
inline void VideoImage::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoImage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoImage::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.width)
  return _internal_width();
}
inline void VideoImage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void VideoImage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoImage.width)
}

// required uint32 height = 2;
inline bool VideoImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoImage::has_height() const {
  return _internal_has_height();
}
inline void VideoImage::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoImage::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoImage::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.height)
  return _internal_height();
}
inline void VideoImage::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void VideoImage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoImage.height)
}

// repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
inline int VideoImage::_internal_points_size() const {
  return points_.size();
}
inline int VideoImage::points_size() const {
  return _internal_points_size();
}
inline void VideoImage::clear_points() {
  points_.Clear();
}
inline ::com::zhichenhaixin::proto::PixelPoint* VideoImage::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VideoImage.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >*
VideoImage::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.VideoImage.points)
  return &points_;
}
inline const ::com::zhichenhaixin::proto::PixelPoint& VideoImage::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::com::zhichenhaixin::proto::PixelPoint& VideoImage::points(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.points)
  return _internal_points(index);
}
inline ::com::zhichenhaixin::proto::PixelPoint* VideoImage::_internal_add_points() {
  return points_.Add();
}
inline ::com::zhichenhaixin::proto::PixelPoint* VideoImage::add_points() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.VideoImage.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >&
VideoImage::points() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.VideoImage.points)
  return points_;
}

// -------------------------------------------------------------------

// PredictionArea

// repeated .com.zhichenhaixin.proto.Latlon area = 1;
inline int PredictionArea::_internal_area_size() const {
  return area_.size();
}
inline int PredictionArea::area_size() const {
  return _internal_area_size();
}
inline void PredictionArea::clear_area() {
  area_.Clear();
}
inline ::com::zhichenhaixin::proto::Latlon* PredictionArea::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PredictionArea.area)
  return area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
PredictionArea::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.PredictionArea.area)
  return &area_;
}
inline const ::com::zhichenhaixin::proto::Latlon& PredictionArea::_internal_area(int index) const {
  return area_.Get(index);
}
inline const ::com::zhichenhaixin::proto::Latlon& PredictionArea::area(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PredictionArea.area)
  return _internal_area(index);
}
inline ::com::zhichenhaixin::proto::Latlon* PredictionArea::_internal_add_area() {
  return area_.Add();
}
inline ::com::zhichenhaixin::proto::Latlon* PredictionArea::add_area() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.PredictionArea.area)
  return _internal_add_area();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
PredictionArea::area() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.PredictionArea.area)
  return area_;
}

// -------------------------------------------------------------------

// Segment

// required .com.zhichenhaixin.proto.Latlon start = 1;
inline bool Segment::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool Segment::has_start() const {
  return _internal_has_start();
}
inline void Segment::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::_internal_start() const {
  const ::com::zhichenhaixin::proto::Latlon* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::start() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.start)
  return _internal_start();
}
inline void Segment::unsafe_arena_set_allocated_start(
    ::com::zhichenhaixin::proto::Latlon* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.Segment.start)
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.Segment.start)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::Latlon* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000001u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::mutable_start() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.Segment.start)
  return _internal_mutable_start();
}
inline void Segment::set_allocated_start(::com::zhichenhaixin::proto::Latlon* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.Segment.start)
}

// required .com.zhichenhaixin.proto.Latlon end = 2;
inline bool Segment::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool Segment::has_end() const {
  return _internal_has_end();
}
inline void Segment::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::_internal_end() const {
  const ::com::zhichenhaixin::proto::Latlon* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::end() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.end)
  return _internal_end();
}
inline void Segment::unsafe_arena_set_allocated_end(
    ::com::zhichenhaixin::proto::Latlon* end) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.Segment.end)
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::release_end() {
  auto temp = unsafe_arena_release_end();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.Segment.end)
  _has_bits_[0] &= ~0x00000002u;
  ::com::zhichenhaixin::proto::Latlon* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000002u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    end_ = p;
  }
  return end_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::mutable_end() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.Segment.end)
  return _internal_mutable_end();
}
inline void Segment::set_allocated_end(::com::zhichenhaixin::proto::Latlon* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.Segment.end)
}

// optional double angle = 3;
inline bool Segment::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Segment::has_angle() const {
  return _internal_has_angle();
}
inline void Segment::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Segment::_internal_angle() const {
  return angle_;
}
inline double Segment::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.angle)
  return _internal_angle();
}
inline void Segment::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  angle_ = value;
}
inline void Segment::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Segment.angle)
}

// -------------------------------------------------------------------

// BoundRect

// required .com.zhichenhaixin.proto.Latlon topLeft = 1;
inline bool BoundRect::_internal_has_topleft() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || topleft_ != nullptr);
  return value;
}
inline bool BoundRect::has_topleft() const {
  return _internal_has_topleft();
}
inline void BoundRect::clear_topleft() {
  if (topleft_ != nullptr) topleft_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::_internal_topleft() const {
  const ::com::zhichenhaixin::proto::Latlon* p = topleft_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::topleft() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.topLeft)
  return _internal_topleft();
}
inline void BoundRect::unsafe_arena_set_allocated_topleft(
    ::com::zhichenhaixin::proto::Latlon* topleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topleft_);
  }
  topleft_ = topleft;
  if (topleft) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.BoundRect.topLeft)
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::release_topleft() {
  auto temp = unsafe_arena_release_topleft();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::unsafe_arena_release_topleft() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.BoundRect.topLeft)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::Latlon* temp = topleft_;
  topleft_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::_internal_mutable_topleft() {
  _has_bits_[0] |= 0x00000001u;
  if (topleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    topleft_ = p;
  }
  return topleft_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::mutable_topleft() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BoundRect.topLeft)
  return _internal_mutable_topleft();
}
inline void BoundRect::set_allocated_topleft(::com::zhichenhaixin::proto::Latlon* topleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topleft_;
  }
  if (topleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topleft);
    if (message_arena != submessage_arena) {
      topleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topleft_ = topleft;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BoundRect.topLeft)
}

// required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
inline bool BoundRect::_internal_has_bottomright() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bottomright_ != nullptr);
  return value;
}
inline bool BoundRect::has_bottomright() const {
  return _internal_has_bottomright();
}
inline void BoundRect::clear_bottomright() {
  if (bottomright_ != nullptr) bottomright_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::_internal_bottomright() const {
  const ::com::zhichenhaixin::proto::Latlon* p = bottomright_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::bottomright() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.bottomRight)
  return _internal_bottomright();
}
inline void BoundRect::unsafe_arena_set_allocated_bottomright(
    ::com::zhichenhaixin::proto::Latlon* bottomright) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottomright_);
  }
  bottomright_ = bottomright;
  if (bottomright) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.BoundRect.bottomRight)
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::release_bottomright() {
  auto temp = unsafe_arena_release_bottomright();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::unsafe_arena_release_bottomright() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.BoundRect.bottomRight)
  _has_bits_[0] &= ~0x00000002u;
  ::com::zhichenhaixin::proto::Latlon* temp = bottomright_;
  bottomright_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::_internal_mutable_bottomright() {
  _has_bits_[0] |= 0x00000002u;
  if (bottomright_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    bottomright_ = p;
  }
  return bottomright_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::mutable_bottomright() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BoundRect.bottomRight)
  return _internal_mutable_bottomright();
}
inline void BoundRect::set_allocated_bottomright(::com::zhichenhaixin::proto::Latlon* bottomright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bottomright_;
  }
  if (bottomright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bottomright);
    if (message_arena != submessage_arena) {
      bottomright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bottomright_ = bottomright;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BoundRect.bottomRight)
}

// optional int32 diameter = 3;
inline bool BoundRect::_internal_has_diameter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundRect::has_diameter() const {
  return _internal_has_diameter();
}
inline void BoundRect::clear_diameter() {
  diameter_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundRect::_internal_diameter() const {
  return diameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoundRect::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.diameter)
  return _internal_diameter();
}
inline void BoundRect::_internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  diameter_ = value;
}
inline void BoundRect::set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diameter(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BoundRect.diameter)
}

// -------------------------------------------------------------------

// RadarRectDef

// required uint32 rectNumber = 1;
inline bool RadarRectDef::_internal_has_rectnumber() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarRectDef::has_rectnumber() const {
  return _internal_has_rectnumber();
}
inline void RadarRectDef::clear_rectnumber() {
  rectnumber_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::_internal_rectnumber() const {
  return rectnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
  return _internal_rectnumber();
}
inline void RadarRectDef::_internal_set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rectnumber_ = value;
}
inline void RadarRectDef::set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rectnumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
}

// required .com.zhichenhaixin.proto.Latlon center = 2;
inline bool RadarRectDef::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool RadarRectDef::has_center() const {
  return _internal_has_center();
}
inline void RadarRectDef::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::_internal_center() const {
  const ::com::zhichenhaixin::proto::Latlon* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::center() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.center)
  return _internal_center();
}
inline void RadarRectDef::unsafe_arena_set_allocated_center(
    ::com::zhichenhaixin::proto::Latlon* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRectDef.center)
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRectDef.center)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::Latlon* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000001u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::mutable_center() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.center)
  return _internal_mutable_center();
}
inline void RadarRectDef::set_allocated_center(::com::zhichenhaixin::proto::Latlon* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.center)
}

// required uint32 updateTime = 3;
inline bool RadarRectDef::_internal_has_updatetime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarRectDef::has_updatetime() const {
  return _internal_has_updatetime();
}
inline void RadarRectDef::clear_updatetime() {
  updatetime_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::updatetime() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.updateTime)
  return _internal_updatetime();
}
inline void RadarRectDef::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  updatetime_ = value;
}
inline void RadarRectDef::set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.updateTime)
}

// required bool realData = 4;
inline bool RadarRectDef::_internal_has_realdata() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarRectDef::has_realdata() const {
  return _internal_has_realdata();
}
inline void RadarRectDef::clear_realdata() {
  realdata_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool RadarRectDef::_internal_realdata() const {
  return realdata_;
}
inline bool RadarRectDef::realdata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.realData)
  return _internal_realdata();
}
inline void RadarRectDef::_internal_set_realdata(bool value) {
  _has_bits_[0] |= 0x00000400u;
  realdata_ = value;
}
inline void RadarRectDef::set_realdata(bool value) {
  _internal_set_realdata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.realData)
}

// required double sogKnot = 5;
inline bool RadarRectDef::_internal_has_sogknot() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarRectDef::has_sogknot() const {
  return _internal_has_sogknot();
}
inline void RadarRectDef::clear_sogknot() {
  sogknot_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RadarRectDef::_internal_sogknot() const {
  return sogknot_;
}
inline double RadarRectDef::sogknot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sogKnot)
  return _internal_sogknot();
}
inline void RadarRectDef::_internal_set_sogknot(double value) {
  _has_bits_[0] |= 0x00000080u;
  sogknot_ = value;
}
inline void RadarRectDef::set_sogknot(double value) {
  _internal_set_sogknot(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sogKnot)
}

// required double sogMS = 6;
inline bool RadarRectDef::_internal_has_sogms() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarRectDef::has_sogms() const {
  return _internal_has_sogms();
}
inline void RadarRectDef::clear_sogms() {
  sogms_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RadarRectDef::_internal_sogms() const {
  return sogms_;
}
inline double RadarRectDef::sogms() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sogMS)
  return _internal_sogms();
}
inline void RadarRectDef::_internal_set_sogms(double value) {
  _has_bits_[0] |= 0x00000100u;
  sogms_ = value;
}
inline void RadarRectDef::set_sogms(double value) {
  _internal_set_sogms(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sogMS)
}

// required double cog = 7;
inline bool RadarRectDef::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarRectDef::has_cog() const {
  return _internal_has_cog();
}
inline void RadarRectDef::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double RadarRectDef::_internal_cog() const {
  return cog_;
}
inline double RadarRectDef::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.cog)
  return _internal_cog();
}
inline void RadarRectDef::_internal_set_cog(double value) {
  _has_bits_[0] |= 0x00000200u;
  cog_ = value;
}
inline void RadarRectDef::set_cog(double value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.cog)
}

// repeated .com.zhichenhaixin.proto.Latlon outline = 8;
inline int RadarRectDef::_internal_outline_size() const {
  return outline_.size();
}
inline int RadarRectDef::outline_size() const {
  return _internal_outline_size();
}
inline void RadarRectDef::clear_outline() {
  outline_.Clear();
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::mutable_outline(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
RadarRectDef::mutable_outline() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.outline)
  return &outline_;
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::_internal_outline(int index) const {
  return outline_.Get(index);
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::outline(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.outline)
  return _internal_outline(index);
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::_internal_add_outline() {
  return outline_.Add();
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::add_outline() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.outline)
  return _internal_add_outline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
RadarRectDef::outline() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_;
}

// optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
inline bool RadarRectDef::_internal_has_boundrect() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || boundrect_ != nullptr);
  return value;
}
inline bool RadarRectDef::has_boundrect() const {
  return _internal_has_boundrect();
}
inline void RadarRectDef::clear_boundrect() {
  if (boundrect_ != nullptr) boundrect_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::zhichenhaixin::proto::BoundRect& RadarRectDef::_internal_boundrect() const {
  const ::com::zhichenhaixin::proto::BoundRect* p = boundrect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::BoundRect*>(
      &::com::zhichenhaixin::proto::_BoundRect_default_instance_);
}
inline const ::com::zhichenhaixin::proto::BoundRect& RadarRectDef::boundrect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.boundRect)
  return _internal_boundrect();
}
inline void RadarRectDef::unsafe_arena_set_allocated_boundrect(
    ::com::zhichenhaixin::proto::BoundRect* boundrect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundrect_);
  }
  boundrect_ = boundrect;
  if (boundrect) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRectDef.boundRect)
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::release_boundrect() {
  auto temp = unsafe_arena_release_boundrect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::unsafe_arena_release_boundrect() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRectDef.boundRect)
  _has_bits_[0] &= ~0x00000002u;
  ::com::zhichenhaixin::proto::BoundRect* temp = boundrect_;
  boundrect_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::_internal_mutable_boundrect() {
  _has_bits_[0] |= 0x00000002u;
  if (boundrect_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::BoundRect>(GetArena());
    boundrect_ = p;
  }
  return boundrect_;
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::mutable_boundrect() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.boundRect)
  return _internal_mutable_boundrect();
}
inline void RadarRectDef::set_allocated_boundrect(::com::zhichenhaixin::proto::BoundRect* boundrect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boundrect_;
  }
  if (boundrect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boundrect);
    if (message_arena != submessage_arena) {
      boundrect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundrect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  boundrect_ = boundrect;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.boundRect)
}

// optional .com.zhichenhaixin.proto.Segment seg = 10;
inline bool RadarRectDef::_internal_has_seg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || seg_ != nullptr);
  return value;
}
inline bool RadarRectDef::has_seg() const {
  return _internal_has_seg();
}
inline void RadarRectDef::clear_seg() {
  if (seg_ != nullptr) seg_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::zhichenhaixin::proto::Segment& RadarRectDef::_internal_seg() const {
  const ::com::zhichenhaixin::proto::Segment* p = seg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Segment*>(
      &::com::zhichenhaixin::proto::_Segment_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Segment& RadarRectDef::seg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.seg)
  return _internal_seg();
}
inline void RadarRectDef::unsafe_arena_set_allocated_seg(
    ::com::zhichenhaixin::proto::Segment* seg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_);
  }
  seg_ = seg;
  if (seg) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRectDef.seg)
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::release_seg() {
  auto temp = unsafe_arena_release_seg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::unsafe_arena_release_seg() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRectDef.seg)
  _has_bits_[0] &= ~0x00000004u;
  ::com::zhichenhaixin::proto::Segment* temp = seg_;
  seg_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::_internal_mutable_seg() {
  _has_bits_[0] |= 0x00000004u;
  if (seg_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Segment>(GetArena());
    seg_ = p;
  }
  return seg_;
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::mutable_seg() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.seg)
  return _internal_mutable_seg();
}
inline void RadarRectDef::set_allocated_seg(::com::zhichenhaixin::proto::Segment* seg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete seg_;
  }
  if (seg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(seg);
    if (message_arena != submessage_arena) {
      seg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  seg_ = seg;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.seg)
}

// optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
inline bool RadarRectDef::_internal_has_fixedimg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || fixedimg_ != nullptr);
  return value;
}
inline bool RadarRectDef::has_fixedimg() const {
  return _internal_has_fixedimg();
}
inline void RadarRectDef::clear_fixedimg() {
  if (fixedimg_ != nullptr) fixedimg_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::zhichenhaixin::proto::VideoImage& RadarRectDef::_internal_fixedimg() const {
  const ::com::zhichenhaixin::proto::VideoImage* p = fixedimg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::VideoImage*>(
      &::com::zhichenhaixin::proto::_VideoImage_default_instance_);
}
inline const ::com::zhichenhaixin::proto::VideoImage& RadarRectDef::fixedimg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
  return _internal_fixedimg();
}
inline void RadarRectDef::unsafe_arena_set_allocated_fixedimg(
    ::com::zhichenhaixin::proto::VideoImage* fixedimg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixedimg_);
  }
  fixedimg_ = fixedimg;
  if (fixedimg) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::release_fixedimg() {
  auto temp = unsafe_arena_release_fixedimg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::unsafe_arena_release_fixedimg() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
  _has_bits_[0] &= ~0x00000008u;
  ::com::zhichenhaixin::proto::VideoImage* temp = fixedimg_;
  fixedimg_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::_internal_mutable_fixedimg() {
  _has_bits_[0] |= 0x00000008u;
  if (fixedimg_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::VideoImage>(GetArena());
    fixedimg_ = p;
  }
  return fixedimg_;
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::mutable_fixedimg() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
  return _internal_mutable_fixedimg();
}
inline void RadarRectDef::set_allocated_fixedimg(::com::zhichenhaixin::proto::VideoImage* fixedimg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fixedimg_;
  }
  if (fixedimg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixedimg);
    if (message_arena != submessage_arena) {
      fixedimg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixedimg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  fixedimg_ = fixedimg;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
}

// optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
inline bool RadarRectDef::_internal_has_prediction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || prediction_ != nullptr);
  return value;
}
inline bool RadarRectDef::has_prediction() const {
  return _internal_has_prediction();
}
inline void RadarRectDef::clear_prediction() {
  if (prediction_ != nullptr) prediction_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::zhichenhaixin::proto::PredictionArea& RadarRectDef::_internal_prediction() const {
  const ::com::zhichenhaixin::proto::PredictionArea* p = prediction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::PredictionArea*>(
      &::com::zhichenhaixin::proto::_PredictionArea_default_instance_);
}
inline const ::com::zhichenhaixin::proto::PredictionArea& RadarRectDef::prediction() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.prediction)
  return _internal_prediction();
}
inline void RadarRectDef::unsafe_arena_set_allocated_prediction(
    ::com::zhichenhaixin::proto::PredictionArea* prediction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_);
  }
  prediction_ = prediction;
  if (prediction) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRectDef.prediction)
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::release_prediction() {
  auto temp = unsafe_arena_release_prediction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::unsafe_arena_release_prediction() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRectDef.prediction)
  _has_bits_[0] &= ~0x00000010u;
  ::com::zhichenhaixin::proto::PredictionArea* temp = prediction_;
  prediction_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::_internal_mutable_prediction() {
  _has_bits_[0] |= 0x00000010u;
  if (prediction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::PredictionArea>(GetArena());
    prediction_ = p;
  }
  return prediction_;
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.prediction)
  return _internal_mutable_prediction();
}
inline void RadarRectDef::set_allocated_prediction(::com::zhichenhaixin::proto::PredictionArea* prediction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prediction_;
  }
  if (prediction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prediction);
    if (message_arena != submessage_arena) {
      prediction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.prediction)
}

// optional int32 videoCycleIndex = 13;
inline bool RadarRectDef::_internal_has_videocycleindex() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarRectDef::has_videocycleindex() const {
  return _internal_has_videocycleindex();
}
inline void RadarRectDef::clear_videocycleindex() {
  videocycleindex_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRectDef::_internal_videocycleindex() const {
  return videocycleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRectDef::videocycleindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
  return _internal_videocycleindex();
}
inline void RadarRectDef::_internal_set_videocycleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  videocycleindex_ = value;
}
inline void RadarRectDef::set_videocycleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_videocycleindex(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
}

// -------------------------------------------------------------------

// RoutePath

// repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
inline int RoutePath::_internal_path_size() const {
  return path_.size();
}
inline int RoutePath::path_size() const {
  return _internal_path_size();
}
inline void RoutePath::clear_path() {
  path_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RoutePath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RoutePath.path)
  return &path_;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RoutePath::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RoutePath::path(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RoutePath.path)
  return _internal_path(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::_internal_add_path() {
  return path_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::add_path() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RoutePath.path)
  return _internal_add_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RoutePath::path() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RoutePath.path)
  return path_;
}

// -------------------------------------------------------------------

// RouteNode

// required int32 node_num = 1;
inline bool RouteNode::_internal_has_node_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RouteNode::has_node_num() const {
  return _internal_has_node_num();
}
inline void RouteNode::clear_node_num() {
  node_num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteNode::_internal_node_num() const {
  return node_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RouteNode::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.node_num)
  return _internal_node_num();
}
inline void RouteNode::_internal_set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  node_num_ = value;
}
inline void RouteNode::set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_num(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RouteNode.node_num)
}

// required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
inline bool RouteNode::_internal_has_top_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || top_node_ != nullptr);
  return value;
}
inline bool RouteNode::has_top_node() const {
  return _internal_has_top_node();
}
inline void RouteNode::clear_top_node() {
  if (top_node_ != nullptr) top_node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RouteNode::_internal_top_node() const {
  const ::com::zhichenhaixin::proto::RadarRectDef* p = top_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::RadarRectDef*>(
      &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RouteNode::top_node() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.top_node)
  return _internal_top_node();
}
inline void RouteNode::unsafe_arena_set_allocated_top_node(
    ::com::zhichenhaixin::proto::RadarRectDef* top_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_node_);
  }
  top_node_ = top_node;
  if (top_node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RouteNode.top_node)
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::release_top_node() {
  auto temp = unsafe_arena_release_top_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::unsafe_arena_release_top_node() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RouteNode.top_node)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::RadarRectDef* temp = top_node_;
  top_node_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::_internal_mutable_top_node() {
  _has_bits_[0] |= 0x00000001u;
  if (top_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(GetArena());
    top_node_ = p;
  }
  return top_node_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::mutable_top_node() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.top_node)
  return _internal_mutable_top_node();
}
inline void RouteNode::set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_node_;
  }
  if (top_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_node);
    if (message_arena != submessage_arena) {
      top_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  top_node_ = top_node;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RouteNode.top_node)
}

// repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
inline int RouteNode::_internal_path_list_size() const {
  return path_list_.size();
}
inline int RouteNode::path_list_size() const {
  return _internal_path_list_size();
}
inline void RouteNode::clear_path_list() {
  path_list_.Clear();
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::mutable_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
RouteNode::mutable_path_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return &path_list_;
}
inline const ::com::zhichenhaixin::proto::RoutePath& RouteNode::_internal_path_list(int index) const {
  return path_list_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RoutePath& RouteNode::path_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.path_list)
  return _internal_path_list(index);
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::_internal_add_path_list() {
  return path_list_.Add();
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::add_path_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNode.path_list)
  return _internal_add_path_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
RouteNode::path_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_;
}

// -------------------------------------------------------------------

// RouteNodes

// repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
inline int RouteNodes::_internal_node_list_size() const {
  return node_list_.size();
}
inline int RouteNodes::node_list_size() const {
  return _internal_node_list_size();
}
inline void RouteNodes::clear_node_list() {
  node_list_.Clear();
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
RouteNodes::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return &node_list_;
}
inline const ::com::zhichenhaixin::proto::RouteNode& RouteNodes::_internal_node_list(int index) const {
  return node_list_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RouteNode& RouteNodes::node_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNodes.node_list)
  return _internal_node_list(index);
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::_internal_add_node_list() {
  return node_list_.Add();
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::add_node_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNodes.node_list)
  return _internal_add_node_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
RouteNodes::node_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_;
}

// -------------------------------------------------------------------

// RadarRect

// required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
inline bool RadarRect::_internal_has_current_rect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_rect_ != nullptr);
  return value;
}
inline bool RadarRect::has_current_rect() const {
  return _internal_has_current_rect();
}
inline void RadarRect::clear_current_rect() {
  if (current_rect_ != nullptr) current_rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::_internal_current_rect() const {
  const ::com::zhichenhaixin::proto::RadarRectDef* p = current_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::RadarRectDef*>(
      &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::current_rect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.current_rect)
  return _internal_current_rect();
}
inline void RadarRect::unsafe_arena_set_allocated_current_rect(
    ::com::zhichenhaixin::proto::RadarRectDef* current_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_rect_);
  }
  current_rect_ = current_rect;
  if (current_rect) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRect.current_rect)
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::release_current_rect() {
  auto temp = unsafe_arena_release_current_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::unsafe_arena_release_current_rect() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRect.current_rect)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::RadarRectDef* temp = current_rect_;
  current_rect_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::_internal_mutable_current_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (current_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(GetArena());
    current_rect_ = p;
  }
  return current_rect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_current_rect() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.current_rect)
  return _internal_mutable_current_rect();
}
inline void RadarRect::set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_rect_;
  }
  if (current_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_rect);
    if (message_arena != submessage_arena) {
      current_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_rect_ = current_rect;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.current_rect)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
inline int RadarRect::_internal_history_rect_list_size() const {
  return history_rect_list_.size();
}
inline int RadarRect::history_rect_list_size() const {
  return _internal_history_rect_list_size();
}
inline void RadarRect::clear_history_rect_list() {
  history_rect_list_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_history_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RadarRect::mutable_history_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return &history_rect_list_;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::_internal_history_rect_list(int index) const {
  return history_rect_list_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::history_rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return _internal_history_rect_list(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::_internal_add_history_rect_list() {
  return history_rect_list_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::add_history_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return _internal_add_history_rect_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RadarRect::history_rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_;
}

// required bool dir_confirmed = 3;
inline bool RadarRect::_internal_has_dir_confirmed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarRect::has_dir_confirmed() const {
  return _internal_has_dir_confirmed();
}
inline void RadarRect::clear_dir_confirmed() {
  dir_confirmed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RadarRect::_internal_dir_confirmed() const {
  return dir_confirmed_;
}
inline bool RadarRect::dir_confirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
  return _internal_dir_confirmed();
}
inline void RadarRect::_internal_set_dir_confirmed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  dir_confirmed_ = value;
}
inline void RadarRect::set_dir_confirmed(bool value) {
  _internal_set_dir_confirmed(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
}

// required uint32 cur_est_count = 4;
inline bool RadarRect::_internal_has_cur_est_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarRect::has_cur_est_count() const {
  return _internal_has_cur_est_count();
}
inline void RadarRect::clear_cur_est_count() {
  cur_est_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRect::_internal_cur_est_count() const {
  return cur_est_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRect::cur_est_count() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.cur_est_count)
  return _internal_cur_est_count();
}
inline void RadarRect::_internal_set_cur_est_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cur_est_count_ = value;
}
inline void RadarRect::set_cur_est_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cur_est_count(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.cur_est_count)
}

// required int32 node_num = 5;
inline bool RadarRect::_internal_has_node_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarRect::has_node_num() const {
  return _internal_has_node_num();
}
inline void RadarRect::clear_node_num() {
  node_num_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRect::_internal_node_num() const {
  return node_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRect::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.node_num)
  return _internal_node_num();
}
inline void RadarRect::_internal_set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  node_num_ = value;
}
inline void RadarRect::set_node_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_num(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.node_num)
}

// -------------------------------------------------------------------

// RadarRects

// required uint64 UTC = 1;
inline bool RadarRects::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarRects::has_utc() const {
  return _internal_has_utc();
}
inline void RadarRects::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarRects::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarRects::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.UTC)
  return _internal_utc();
}
inline void RadarRects::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  utc_ = value;
}
inline void RadarRects::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.UTC)
}

// required int32 length = 2;
inline bool RadarRects::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarRects::has_length() const {
  return _internal_has_length();
}
inline void RadarRects::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRects::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRects::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.length)
  return _internal_length();
}
inline void RadarRects::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void RadarRects::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.length)
}

// repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
inline int RadarRects::_internal_rect_list_size() const {
  return rect_list_.size();
}
inline int RadarRects::rect_list_size() const {
  return _internal_rect_list_size();
}
inline void RadarRects::clear_rect_list() {
  rect_list_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::mutable_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
RadarRects::mutable_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return &rect_list_;
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::_internal_rect_list(int index) const {
  return rect_list_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.rect_list)
  return _internal_rect_list(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::_internal_add_rect_list() {
  return rect_list_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::add_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRects.rect_list)
  return _internal_add_rect_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
RadarRects::rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_;
}

// -------------------------------------------------------------------

// TrackPoint

// required string radarSiteID = 1;
inline bool TrackPoint::_internal_has_radarsiteid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackPoint::has_radarsiteid() const {
  return _internal_has_radarsiteid();
}
inline void TrackPoint::clear_radarsiteid() {
  radarsiteid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackPoint::radarsiteid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  return _internal_radarsiteid();
}
inline void TrackPoint::set_radarsiteid(const std::string& value) {
  _internal_set_radarsiteid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline std::string* TrackPoint::mutable_radarsiteid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  return _internal_mutable_radarsiteid();
}
inline const std::string& TrackPoint::_internal_radarsiteid() const {
  return radarsiteid_.Get();
}
inline void TrackPoint::_internal_set_radarsiteid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radarsiteid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackPoint::set_radarsiteid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radarsiteid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline void TrackPoint::set_radarsiteid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radarsiteid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline void TrackPoint::set_radarsiteid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radarsiteid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline std::string* TrackPoint::_internal_mutable_radarsiteid() {
  _has_bits_[0] |= 0x00000001u;
  return radarsiteid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackPoint::release_radarsiteid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  if (!_internal_has_radarsiteid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radarsiteid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackPoint::set_allocated_radarsiteid(std::string* radarsiteid) {
  if (radarsiteid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarsiteid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarsiteid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline std::string* TrackPoint::unsafe_arena_release_radarsiteid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return radarsiteid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackPoint::unsafe_arena_set_allocated_radarsiteid(
    std::string* radarsiteid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarsiteid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarsiteid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarsiteid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}

// required uint32 trackNumber = 2;
inline bool TrackPoint::_internal_has_tracknumber() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackPoint::has_tracknumber() const {
  return _internal_has_tracknumber();
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPoint::_internal_tracknumber() const {
  return tracknumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackNumber)
  return _internal_tracknumber();
}
inline void TrackPoint::_internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tracknumber_ = value;
}
inline void TrackPoint::set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tracknumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackNumber)
}

// required .com.zhichenhaixin.proto.RadarRectDef current = 3;
inline bool TrackPoint::_internal_has_current() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || current_ != nullptr);
  return value;
}
inline bool TrackPoint::has_current() const {
  return _internal_has_current();
}
inline void TrackPoint::clear_current() {
  if (current_ != nullptr) current_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::_internal_current() const {
  const ::com::zhichenhaixin::proto::RadarRectDef* p = current_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::RadarRectDef*>(
      &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::current() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.current)
  return _internal_current();
}
inline void TrackPoint::unsafe_arena_set_allocated_current(
    ::com::zhichenhaixin::proto::RadarRectDef* current) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_);
  }
  current_ = current;
  if (current) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.current)
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::release_current() {
  auto temp = unsafe_arena_release_current();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::unsafe_arena_release_current() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.current)
  _has_bits_[0] &= ~0x00000004u;
  ::com::zhichenhaixin::proto::RadarRectDef* temp = current_;
  current_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::_internal_mutable_current() {
  _has_bits_[0] |= 0x00000004u;
  if (current_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(GetArena());
    current_ = p;
  }
  return current_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::mutable_current() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.current)
  return _internal_mutable_current();
}
inline void TrackPoint::set_allocated_current(::com::zhichenhaixin::proto::RadarRectDef* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_;
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current);
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.current)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
inline int TrackPoint::_internal_tracks_size() const {
  return tracks_.size();
}
inline int TrackPoint::tracks_size() const {
  return _internal_tracks_size();
}
inline void TrackPoint::clear_tracks() {
  tracks_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
TrackPoint::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.TrackPoint.tracks)
  return &tracks_;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::_internal_tracks(int index) const {
  return tracks_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::tracks(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.tracks)
  return _internal_tracks(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::_internal_add_tracks() {
  return tracks_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::add_tracks() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.TrackPoint.tracks)
  return _internal_add_tracks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
TrackPoint::tracks() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_;
}

// optional bool trackConfirmed = 5;
inline bool TrackPoint::_internal_has_trackconfirmed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackPoint::has_trackconfirmed() const {
  return _internal_has_trackconfirmed();
}
inline void TrackPoint::clear_trackconfirmed() {
  trackconfirmed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrackPoint::_internal_trackconfirmed() const {
  return trackconfirmed_;
}
inline bool TrackPoint::trackconfirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
  return _internal_trackconfirmed();
}
inline void TrackPoint::_internal_set_trackconfirmed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  trackconfirmed_ = value;
}
inline void TrackPoint::set_trackconfirmed(bool value) {
  _internal_set_trackconfirmed(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
}

// optional int32 objType = 6;
inline bool TrackPoint::_internal_has_objtype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackPoint::has_objtype() const {
  return _internal_has_objtype();
}
inline void TrackPoint::clear_objtype() {
  objtype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_objtype() const {
  return objtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::objtype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.objType)
  return _internal_objtype();
}
inline void TrackPoint::_internal_set_objtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  objtype_ = value;
}
inline void TrackPoint::set_objtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.objType)
}

// optional string objName = 7;
inline bool TrackPoint::_internal_has_objname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackPoint::has_objname() const {
  return _internal_has_objname();
}
inline void TrackPoint::clear_objname() {
  objname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackPoint::objname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.objName)
  return _internal_objname();
}
inline void TrackPoint::set_objname(const std::string& value) {
  _internal_set_objname(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline std::string* TrackPoint::mutable_objname() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.objName)
  return _internal_mutable_objname();
}
inline const std::string& TrackPoint::_internal_objname() const {
  return objname_.Get();
}
inline void TrackPoint::_internal_set_objname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackPoint::set_objname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  objname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline void TrackPoint::set_objname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline void TrackPoint::set_objname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline std::string* TrackPoint::_internal_mutable_objname() {
  _has_bits_[0] |= 0x00000002u;
  return objname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackPoint::release_objname() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.objName)
  if (!_internal_has_objname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return objname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackPoint::set_allocated_objname(std::string* objname) {
  if (objname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline std::string* TrackPoint::unsafe_arena_release_objname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.TrackPoint.objName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return objname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackPoint::unsafe_arena_set_allocated_objname(
    std::string* objname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (objname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      objname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.objName)
}

// -------------------------------------------------------------------

// RadarSurfaceTrack

// required int32 flag = 1;
inline bool RadarSurfaceTrack::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_flag() const {
  return _internal_has_flag();
}
inline void RadarSurfaceTrack::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
  return _internal_flag();
}
inline void RadarSurfaceTrack::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void RadarSurfaceTrack::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
}

// required string sourceId = 2;
inline bool RadarSurfaceTrack::_internal_has_sourceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_sourceid() const {
  return _internal_has_sourceid();
}
inline void RadarSurfaceTrack::clear_sourceid() {
  sourceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarSurfaceTrack::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return _internal_sourceid();
}
inline void RadarSurfaceTrack::set_sourceid(const std::string& value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return _internal_mutable_sourceid();
}
inline const std::string& RadarSurfaceTrack::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void RadarSurfaceTrack::_internal_set_sourceid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarSurfaceTrack::set_sourceid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::_internal_mutable_sourceid() {
  _has_bits_[0] |= 0x00000001u;
  return sourceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarSurfaceTrack::release_sourceid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  if (!_internal_has_sourceid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarSurfaceTrack::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::unsafe_arena_release_sourceid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarSurfaceTrack::unsafe_arena_set_allocated_sourceid(
    std::string* sourceid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sourceid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarSurfaceTrack::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_utc() const {
  return _internal_has_utc();
}
inline void RadarSurfaceTrack::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarSurfaceTrack::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarSurfaceTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
  return _internal_utc();
}
inline void RadarSurfaceTrack::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  utc_ = value;
}
inline void RadarSurfaceTrack::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
}

// required int32 length = 4;
inline bool RadarSurfaceTrack::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_length() const {
  return _internal_has_length();
}
inline void RadarSurfaceTrack::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
  return _internal_length();
}
inline void RadarSurfaceTrack::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void RadarSurfaceTrack::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
inline int RadarSurfaceTrack::_internal_trackpoints_size() const {
  return trackpoints_.size();
}
inline int RadarSurfaceTrack::trackpoints_size() const {
  return _internal_trackpoints_size();
}
inline void RadarSurfaceTrack::clear_trackpoints() {
  trackpoints_.Clear();
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
RadarSurfaceTrack::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return &trackpoints_;
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::_internal_trackpoints(int index) const {
  return trackpoints_.Get(index);
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return _internal_trackpoints(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::_internal_add_trackpoints() {
  return trackpoints_.Add();
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return _internal_add_trackpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
RadarSurfaceTrack::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_;
}

// -------------------------------------------------------------------

// RadarVideoImage

// required string radarId = 1;
inline bool RadarVideoImage::_internal_has_radarid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarVideoImage::has_radarid() const {
  return _internal_has_radarid();
}
inline void RadarVideoImage::clear_radarid() {
  radarid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarVideoImage::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radarId)
  return _internal_radarid();
}
inline void RadarVideoImage::set_radarid(const std::string& value) {
  _internal_set_radarid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}
inline std::string* RadarVideoImage::mutable_radarid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.radarId)
  return _internal_mutable_radarid();
}
inline const std::string& RadarVideoImage::_internal_radarid() const {
  return radarid_.Get();
}
inline void RadarVideoImage::_internal_set_radarid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radarid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoImage::set_radarid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radarid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}
inline void RadarVideoImage::set_radarid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radarid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}
inline void RadarVideoImage::set_radarid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radarid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}
inline std::string* RadarVideoImage::_internal_mutable_radarid() {
  _has_bits_[0] |= 0x00000001u;
  return radarid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoImage::release_radarid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoImage.radarId)
  if (!_internal_has_radarid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radarid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoImage::set_allocated_radarid(std::string* radarid) {
  if (radarid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}
inline std::string* RadarVideoImage::unsafe_arena_release_radarid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoImage.radarId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return radarid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoImage::unsafe_arena_set_allocated_radarid(
    std::string* radarid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}

// required int32 channelId = 2;
inline bool RadarVideoImage::_internal_has_channelid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarVideoImage::has_channelid() const {
  return _internal_has_channelid();
}
inline void RadarVideoImage::clear_channelid() {
  channelid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarVideoImage::_internal_channelid() const {
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarVideoImage::channelid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.channelId)
  return _internal_channelid();
}
inline void RadarVideoImage::_internal_set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  channelid_ = value;
}
inline void RadarVideoImage::set_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.channelId)
}

// required string radarName = 3;
inline bool RadarVideoImage::_internal_has_radarname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarVideoImage::has_radarname() const {
  return _internal_has_radarname();
}
inline void RadarVideoImage::clear_radarname() {
  radarname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RadarVideoImage::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  return _internal_radarname();
}
inline void RadarVideoImage::set_radarname(const std::string& value) {
  _internal_set_radarname(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline std::string* RadarVideoImage::mutable_radarname() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  return _internal_mutable_radarname();
}
inline const std::string& RadarVideoImage::_internal_radarname() const {
  return radarname_.Get();
}
inline void RadarVideoImage::_internal_set_radarname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoImage::set_radarname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  radarname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline void RadarVideoImage::set_radarname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline void RadarVideoImage::set_radarname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline std::string* RadarVideoImage::_internal_mutable_radarname() {
  _has_bits_[0] |= 0x00000002u;
  return radarname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoImage::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  if (!_internal_has_radarname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return radarname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoImage::set_allocated_radarname(std::string* radarname) {
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  radarname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline std::string* RadarVideoImage::unsafe_arena_release_radarname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return radarname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoImage::unsafe_arena_set_allocated_radarname(
    std::string* radarname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  radarname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}

// required .com.zhichenhaixin.proto.Latlon center = 4;
inline bool RadarVideoImage::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool RadarVideoImage::has_center() const {
  return _internal_has_center();
}
inline void RadarVideoImage::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarVideoImage::_internal_center() const {
  const ::com::zhichenhaixin::proto::Latlon* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::Latlon*>(
      &::com::zhichenhaixin::proto::_Latlon_default_instance_);
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarVideoImage::center() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.center)
  return _internal_center();
}
inline void RadarVideoImage::unsafe_arena_set_allocated_center(
    ::com::zhichenhaixin::proto::Latlon* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.center)
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoImage.center)
  _has_bits_[0] &= ~0x00000008u;
  ::com::zhichenhaixin::proto::Latlon* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000008u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::Latlon>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::mutable_center() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.center)
  return _internal_mutable_center();
}
inline void RadarVideoImage::set_allocated_center(::com::zhichenhaixin::proto::Latlon* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.center)
}

// required uint64 utc = 5;
inline bool RadarVideoImage::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarVideoImage::has_utc() const {
  return _internal_has_utc();
}
inline void RadarVideoImage::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoImage::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoImage::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.utc)
  return _internal_utc();
}
inline void RadarVideoImage::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  utc_ = value;
}
inline void RadarVideoImage::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.utc)
}

// required bytes imageData = 6;
inline bool RadarVideoImage::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarVideoImage::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void RadarVideoImage::clear_imagedata() {
  imagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RadarVideoImage::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  return _internal_imagedata();
}
inline void RadarVideoImage::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline std::string* RadarVideoImage::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& RadarVideoImage::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void RadarVideoImage::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoImage::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  imagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline void RadarVideoImage::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline void RadarVideoImage::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline std::string* RadarVideoImage::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000004u;
  return imagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoImage::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoImage::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline std::string* RadarVideoImage::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return imagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoImage::unsafe_arena_set_allocated_imagedata(
    std::string* imagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  imagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}

// required uint32 width = 7;
inline bool RadarVideoImage::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarVideoImage::has_width() const {
  return _internal_has_width();
}
inline void RadarVideoImage::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoImage::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoImage::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.width)
  return _internal_width();
}
inline void RadarVideoImage::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
}
inline void RadarVideoImage::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.width)
}

// required uint32 height = 8;
inline bool RadarVideoImage::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarVideoImage::has_height() const {
  return _internal_has_height();
}
inline void RadarVideoImage::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoImage::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoImage::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.height)
  return _internal_height();
}
inline void RadarVideoImage::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  height_ = value;
}
inline void RadarVideoImage::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.height)
}

// required double radius = 9;
inline bool RadarVideoImage::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarVideoImage::has_radius() const {
  return _internal_has_radius();
}
inline void RadarVideoImage::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RadarVideoImage::_internal_radius() const {
  return radius_;
}
inline double RadarVideoImage::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radius)
  return _internal_radius();
}
inline void RadarVideoImage::_internal_set_radius(double value) {
  _has_bits_[0] |= 0x00000080u;
  radius_ = value;
}
inline void RadarVideoImage::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radius)
}

// -------------------------------------------------------------------

// RadarVideoImages

// required uint64 utc = 1;
inline bool RadarVideoImages::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarVideoImages::has_utc() const {
  return _internal_has_utc();
}
inline void RadarVideoImages::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoImages::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoImages::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImages.utc)
  return _internal_utc();
}
inline void RadarVideoImages::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  utc_ = value;
}
inline void RadarVideoImages::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImages.utc)
}

// repeated .com.zhichenhaixin.proto.RadarVideoImage images = 2;
inline int RadarVideoImages::_internal_images_size() const {
  return images_.size();
}
inline int RadarVideoImages::images_size() const {
  return _internal_images_size();
}
inline void RadarVideoImages::clear_images() {
  images_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarVideoImage* RadarVideoImages::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImages.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarVideoImage >*
RadarVideoImages::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarVideoImages.images)
  return &images_;
}
inline const ::com::zhichenhaixin::proto::RadarVideoImage& RadarVideoImages::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarVideoImage& RadarVideoImages::images(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImages.images)
  return _internal_images(index);
}
inline ::com::zhichenhaixin::proto::RadarVideoImage* RadarVideoImages::_internal_add_images() {
  return images_.Add();
}
inline ::com::zhichenhaixin::proto::RadarVideoImage* RadarVideoImages::add_images() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarVideoImages.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarVideoImage >&
RadarVideoImages::images() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarVideoImages.images)
  return images_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::MSGTYP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::MSGTYP>() {
  return ::com::zhichenhaixin::proto::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CNF> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CNF>() {
  return ::com::zhichenhaixin::proto::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CST>() {
  return ::com::zhichenhaixin::proto::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::STH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::STH>() {
  return ::com::zhichenhaixin::proto::STH_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::RES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::RES>() {
  return ::com::zhichenhaixin::proto::RES_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarDataDef_2eproto
