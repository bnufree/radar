// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarDataDef.proto

#include "ZCHXRadarDataDef.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundRect_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Latlon_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelPoint_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionArea_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRect_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteNode_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutePath_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackPoint_ZCHXRadarDataDef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarDataDef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoImage_ZCHXRadarDataDef_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class LatlonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Latlon> _instance;
} _Latlon_default_instance_;
class PixelPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PixelPoint> _instance;
} _PixelPoint_default_instance_;
class VideoImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoImage> _instance;
} _VideoImage_default_instance_;
class PredictionAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictionArea> _instance;
} _PredictionArea_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
class BoundRectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundRect> _instance;
} _BoundRect_default_instance_;
class RadarRectDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRectDef> _instance;
} _RadarRectDef_default_instance_;
class RoutePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutePath> _instance;
} _RoutePath_default_instance_;
class RouteNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteNode> _instance;
} _RouteNode_default_instance_;
class RouteNodesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteNodes> _instance;
} _RouteNodes_default_instance_;
class RadarRectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRect> _instance;
} _RadarRect_default_instance_;
class RadarRectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRects> _instance;
} _RadarRects_default_instance_;
class TrackPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackPoint> _instance;
} _TrackPoint_default_instance_;
class RadarSurfaceTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarSurfaceTrack> _instance;
} _RadarSurfaceTrack_default_instance_;
class RadarVideoImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarVideoImage> _instance;
} _RadarVideoImage_default_instance_;
class RadarVideoImagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarVideoImages> _instance;
} _RadarVideoImages_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_BoundRect_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_BoundRect_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::BoundRect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::BoundRect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundRect_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundRect_ZCHXRadarDataDef_2eproto}, {
      &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_Latlon_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_Latlon_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::Latlon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::Latlon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Latlon_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Latlon_ZCHXRadarDataDef_2eproto}, {}};

static void InitDefaultsscc_info_PixelPoint_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_PixelPoint_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::PixelPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::PixelPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PixelPoint_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PixelPoint_ZCHXRadarDataDef_2eproto}, {}};

static void InitDefaultsscc_info_PredictionArea_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_PredictionArea_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::PredictionArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::PredictionArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionArea_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PredictionArea_ZCHXRadarDataDef_2eproto}, {
      &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarRect_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRect_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRect_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarRect_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarRectDef_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRectDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRectDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RadarRectDef_ZCHXRadarDataDef_2eproto}, {
      &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,
      &scc_info_BoundRect_ZCHXRadarDataDef_2eproto.base,
      &scc_info_Segment_ZCHXRadarDataDef_2eproto.base,
      &scc_info_VideoImage_ZCHXRadarDataDef_2eproto.base,
      &scc_info_PredictionArea_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarRects_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRects_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRects_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarRects_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarRect_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarSurfaceTrack_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarSurfaceTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarSurfaceTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto}, {
      &scc_info_TrackPoint_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarVideoImage_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarVideoImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarVideoImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto}, {
      &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarVideoImages_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarVideoImages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarVideoImages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RouteNode_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RouteNode_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RouteNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RouteNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteNode_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RouteNode_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base,
      &scc_info_RoutePath_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RouteNodes_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RouteNodes_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RouteNodes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RouteNodes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteNodes_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteNodes_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RouteNode_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_RoutePath_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RoutePath_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RoutePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RoutePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutePath_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutePath_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_Segment_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_Segment_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::Segment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Segment_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Segment_ZCHXRadarDataDef_2eproto}, {
      &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_TrackPoint_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_TrackPoint_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::TrackPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::TrackPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackPoint_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackPoint_ZCHXRadarDataDef_2eproto}, {
      &scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base,}};

static void InitDefaultsscc_info_VideoImage_ZCHXRadarDataDef_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_VideoImage_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::VideoImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::VideoImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoImage_ZCHXRadarDataDef_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoImage_ZCHXRadarDataDef_2eproto}, {
      &scc_info_PixelPoint_ZCHXRadarDataDef_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZCHXRadarDataDef_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZCHXRadarDataDef_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZCHXRadarDataDef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Latlon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Latlon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Latlon, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Latlon, longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PixelPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PixelPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PixelPoint, x_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PixelPoint, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoImage, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoImage, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoImage, points_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PredictionArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::PredictionArea, area_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Segment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Segment, start_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Segment, end_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::Segment, angle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BoundRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BoundRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BoundRect, topleft_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BoundRect, bottomright_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BoundRect, diameter_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, rectnumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, center_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, updatetime_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, realdata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, sogknot_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, sogms_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, cog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, outline_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, boundrect_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, seg_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, fixedimg_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, prediction_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, videocycleindex_),
  5,
  0,
  6,
  10,
  7,
  8,
  9,
  ~0u,
  1,
  2,
  3,
  4,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RoutePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RoutePath, path_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNode, node_num_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNode, top_node_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNode, path_list_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RouteNodes, node_list_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, current_rect_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, history_rect_list_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, dir_confirmed_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, cur_est_count_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, node_num_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, length_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, rect_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, radarsiteid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracknumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, current_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracks_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, trackconfirmed_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, objtype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, objname_),
  0,
  3,
  2,
  ~0u,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, flag_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, sourceid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, length_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, trackpoints_),
  1,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, radarid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, channelid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, radarname_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, center_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, imagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImage, radius_),
  0,
  4,
  1,
  3,
  6,
  2,
  5,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImages, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImages, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoImages, images_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::zhichenhaixin::proto::Latlon)},
  { 9, 16, sizeof(::com::zhichenhaixin::proto::PixelPoint)},
  { 18, 26, sizeof(::com::zhichenhaixin::proto::VideoImage)},
  { 29, -1, sizeof(::com::zhichenhaixin::proto::PredictionArea)},
  { 35, 43, sizeof(::com::zhichenhaixin::proto::Segment)},
  { 46, 54, sizeof(::com::zhichenhaixin::proto::BoundRect)},
  { 57, 75, sizeof(::com::zhichenhaixin::proto::RadarRectDef)},
  { 88, -1, sizeof(::com::zhichenhaixin::proto::RoutePath)},
  { 94, 102, sizeof(::com::zhichenhaixin::proto::RouteNode)},
  { 105, -1, sizeof(::com::zhichenhaixin::proto::RouteNodes)},
  { 111, 121, sizeof(::com::zhichenhaixin::proto::RadarRect)},
  { 126, 134, sizeof(::com::zhichenhaixin::proto::RadarRects)},
  { 137, 149, sizeof(::com::zhichenhaixin::proto::TrackPoint)},
  { 156, 166, sizeof(::com::zhichenhaixin::proto::RadarSurfaceTrack)},
  { 171, 185, sizeof(::com::zhichenhaixin::proto::RadarVideoImage)},
  { 194, 201, sizeof(::com::zhichenhaixin::proto::RadarVideoImages)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_Latlon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_PixelPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_VideoImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_PredictionArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_BoundRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRectDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RoutePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RouteNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RouteNodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_TrackPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarSurfaceTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarVideoImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarVideoImages_default_instance_),
};

const char descriptor_table_protodef_ZCHXRadarDataDef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026ZCHXRadarDataDef.proto\022\027com.zhichenhai"
  "xin.proto\"-\n\006Latlon\022\020\n\010latitude\030\001 \002(\001\022\021\n"
  "\tlongitude\030\002 \002(\001\"\"\n\nPixelPoint\022\t\n\001x\030\001 \002("
  "\r\022\t\n\001y\030\002 \002(\r\"`\n\nVideoImage\022\r\n\005width\030\001 \002("
  "\r\022\016\n\006height\030\002 \002(\r\0223\n\006points\030\003 \003(\0132#.com."
  "zhichenhaixin.proto.PixelPoint\"\?\n\016Predic"
  "tionArea\022-\n\004area\030\001 \003(\0132\037.com.zhichenhaix"
  "in.proto.Latlon\"v\n\007Segment\022.\n\005start\030\001 \002("
  "\0132\037.com.zhichenhaixin.proto.Latlon\022,\n\003en"
  "d\030\002 \002(\0132\037.com.zhichenhaixin.proto.Latlon"
  "\022\r\n\005angle\030\003 \001(\001\"\205\001\n\tBoundRect\0220\n\007topLeft"
  "\030\001 \002(\0132\037.com.zhichenhaixin.proto.Latlon\022"
  "4\n\013bottomRight\030\002 \002(\0132\037.com.zhichenhaixin"
  ".proto.Latlon\022\020\n\010diameter\030\003 \001(\005\"\313\003\n\014Rada"
  "rRectDef\022\022\n\nrectNumber\030\001 \002(\r\022/\n\006center\030\002"
  " \002(\0132\037.com.zhichenhaixin.proto.Latlon\022\022\n"
  "\nupdateTime\030\003 \002(\r\022\020\n\010realData\030\004 \002(\010\022\017\n\007s"
  "ogKnot\030\005 \002(\001\022\r\n\005sogMS\030\006 \002(\001\022\013\n\003cog\030\007 \002(\001"
  "\0220\n\007outline\030\010 \003(\0132\037.com.zhichenhaixin.pr"
  "oto.Latlon\0225\n\tboundRect\030\t \001(\0132\".com.zhic"
  "henhaixin.proto.BoundRect\022-\n\003seg\030\n \001(\0132 "
  ".com.zhichenhaixin.proto.Segment\0225\n\010fixe"
  "dImg\030\013 \001(\0132#.com.zhichenhaixin.proto.Vid"
  "eoImage\022;\n\nprediction\030\014 \001(\0132\'.com.zhiche"
  "nhaixin.proto.PredictionArea\022\027\n\017videoCyc"
  "leIndex\030\r \001(\005\"@\n\tRoutePath\0223\n\004path\030\001 \003(\013"
  "2%.com.zhichenhaixin.proto.RadarRectDef\""
  "\215\001\n\tRouteNode\022\020\n\010node_num\030\001 \002(\005\0227\n\010top_n"
  "ode\030\002 \002(\0132%.com.zhichenhaixin.proto.Rada"
  "rRectDef\0225\n\tpath_list\030\003 \003(\0132\".com.zhiche"
  "nhaixin.proto.RoutePath\"C\n\nRouteNodes\0225\n"
  "\tnode_list\030\001 \003(\0132\".com.zhichenhaixin.pro"
  "to.RouteNode\"\312\001\n\tRadarRect\022;\n\014current_re"
  "ct\030\001 \002(\0132%.com.zhichenhaixin.proto.Radar"
  "RectDef\022@\n\021history_rect_list\030\002 \003(\0132%.com"
  ".zhichenhaixin.proto.RadarRectDef\022\025\n\rdir"
  "_confirmed\030\003 \002(\010\022\025\n\rcur_est_count\030\004 \002(\r\022"
  "\020\n\010node_num\030\005 \002(\005\"`\n\nRadarRects\022\013\n\003UTC\030\001"
  " \002(\004\022\016\n\006length\030\002 \002(\005\0225\n\trect_list\030\003 \003(\0132"
  "\".com.zhichenhaixin.proto.RadarRect\"\337\001\n\n"
  "TrackPoint\022\023\n\013radarSiteID\030\001 \002(\t\022\023\n\013track"
  "Number\030\002 \002(\r\0226\n\007current\030\003 \002(\0132%.com.zhic"
  "henhaixin.proto.RadarRectDef\0225\n\006tracks\030\004"
  " \003(\0132%.com.zhichenhaixin.proto.RadarRect"
  "Def\022\026\n\016trackConfirmed\030\005 \001(\010\022\017\n\007objType\030\006"
  " \001(\005\022\017\n\007objName\030\007 \001(\t\"\212\001\n\021RadarSurfaceTr"
  "ack\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceId\030\002 \002(\t\022\013\n\003U"
  "TC\030\003 \002(\004\022\016\n\006length\030\004 \002(\005\0228\n\013trackPoints\030"
  "\005 \003(\0132#.com.zhichenhaixin.proto.TrackPoi"
  "nt\"\310\001\n\017RadarVideoImage\022\017\n\007radarId\030\001 \002(\t\022"
  "\021\n\tchannelId\030\002 \002(\005\022\021\n\tradarName\030\003 \002(\t\022/\n"
  "\006center\030\004 \002(\0132\037.com.zhichenhaixin.proto."
  "Latlon\022\013\n\003utc\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022\r"
  "\n\005width\030\007 \002(\r\022\016\n\006height\030\010 \002(\r\022\016\n\006radius\030"
  "\t \002(\001\"Y\n\020RadarVideoImages\022\013\n\003utc\030\001 \002(\004\0228"
  "\n\006images\030\002 \003(\0132(.com.zhichenhaixin.proto"
  ".RadarVideoImage*}\n\006MSGTYP\022\024\n\020MSGTYP_UND"
  "EFINED\020\000\022\021\n\rTARGET_REPORT\020\001\022\031\n\025START_OF_"
  "UPDATE_CYCLE\020\002\022\023\n\017PERIODIC_STATUS\020\003\022\032\n\026E"
  "VENT_TRIGGERED_STATUS\020\004*B\n\003CNF\022\023\n\017CONFIR"
  "MED_TRACK\020\000\022\023\n\017TENTATIVE_TRACK\020\001\022\021\n\rUNKN"
  "OWN_TRACK\020\002*\230\001\n\003CST\022\021\n\rCST_UNDEFINED\020\000\022("
  "\n$PREDICTABLE_EXTRAPOLATION_DUE_PERIOD\020\001"
  "\022%\n!PREDICTABLE_EXTRAPOLATION_IN_AREA\020\002\022"
  "-\n)EXTRAPOLATION_DUE_UNPREDICTABLE_DETEC"
  "TION\020\003*3\n\003STH\022\025\n\021MEASURED_POSITION\020\000\022\025\n\021"
  "SMOOTHED_POSITION\020\001*\222\001\n\003RES\022\026\n\022MONOBIT_R"
  "ESOLUTION\020\001\022\022\n\016LOW_RESOLUTION\020\002\022\025\n\021MEDIU"
  "M_RESOLUTION\020\003\022\023\n\017HIGH_RESOLUTION\020\004\022\030\n\024V"
  "ERY_HIGH_RESOLUTION\020\005\022\031\n\025ULTRA_HIGH_RESO"
  "LUTION\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZCHXRadarDataDef_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZCHXRadarDataDef_2eproto_sccs[16] = {
  &scc_info_BoundRect_ZCHXRadarDataDef_2eproto.base,
  &scc_info_Latlon_ZCHXRadarDataDef_2eproto.base,
  &scc_info_PixelPoint_ZCHXRadarDataDef_2eproto.base,
  &scc_info_PredictionArea_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarRect_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarRects_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RouteNode_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RouteNodes_ZCHXRadarDataDef_2eproto.base,
  &scc_info_RoutePath_ZCHXRadarDataDef_2eproto.base,
  &scc_info_Segment_ZCHXRadarDataDef_2eproto.base,
  &scc_info_TrackPoint_ZCHXRadarDataDef_2eproto.base,
  &scc_info_VideoImage_ZCHXRadarDataDef_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZCHXRadarDataDef_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadarDataDef_2eproto = {
  false, false, descriptor_table_protodef_ZCHXRadarDataDef_2eproto, "ZCHXRadarDataDef.proto", 2808,
  &descriptor_table_ZCHXRadarDataDef_2eproto_once, descriptor_table_ZCHXRadarDataDef_2eproto_sccs, descriptor_table_ZCHXRadarDataDef_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_ZCHXRadarDataDef_2eproto::offsets,
  file_level_metadata_ZCHXRadarDataDef_2eproto, 16, file_level_enum_descriptors_ZCHXRadarDataDef_2eproto, file_level_service_descriptors_ZCHXRadarDataDef_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZCHXRadarDataDef_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSGTYP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto);
  return file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[0];
}
bool MSGTYP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CNF_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto);
  return file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[1];
}
bool CNF_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto);
  return file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[2];
}
bool CST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto);
  return file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[3];
}
bool STH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadarDataDef_2eproto);
  return file_level_enum_descriptors_ZCHXRadarDataDef_2eproto[4];
}
bool RES_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Latlon::InitAsDefaultInstance() {
}
class Latlon::_Internal {
 public:
  using HasBits = decltype(std::declval<Latlon>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Latlon::Latlon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.Latlon)
}
Latlon::Latlon(const Latlon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.Latlon)
}

void Latlon::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Latlon::~Latlon() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.Latlon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Latlon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Latlon::ArenaDtor(void* object) {
  Latlon* _this = reinterpret_cast< Latlon* >(object);
  (void)_this;
}
void Latlon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Latlon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Latlon& Latlon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Latlon_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void Latlon::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.Latlon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Latlon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Latlon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.Latlon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.Latlon)
  return target;
}

size_t Latlon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.Latlon)
  size_t total_size = 0;

  if (_internal_has_latitude()) {
    // required double latitude = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Latlon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.Latlon)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double latitude = 1;
    total_size += 1 + 8;

    // required double longitude = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Latlon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.Latlon)
  GOOGLE_DCHECK_NE(&from, this);
  const Latlon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Latlon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.Latlon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.Latlon)
    MergeFrom(*source);
  }
}

void Latlon::MergeFrom(const Latlon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.Latlon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Latlon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.Latlon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latlon::CopyFrom(const Latlon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.Latlon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latlon::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Latlon::InternalSwap(Latlon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Latlon, longitude_)
      + sizeof(Latlon::longitude_)
      - PROTOBUF_FIELD_OFFSET(Latlon, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Latlon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PixelPoint::InitAsDefaultInstance() {
}
class PixelPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PixelPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PixelPoint::PixelPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.PixelPoint)
}
PixelPoint::PixelPoint(const PixelPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PixelPoint)
}

void PixelPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PixelPoint::~PixelPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PixelPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PixelPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PixelPoint::ArenaDtor(void* object) {
  PixelPoint* _this = reinterpret_cast< PixelPoint* >(object);
  (void)_this;
}
void PixelPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PixelPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PixelPoint& PixelPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PixelPoint_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void PixelPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.PixelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PixelPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PixelPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PixelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PixelPoint)
  return target;
}

size_t PixelPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.PixelPoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t PixelPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.PixelPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());

    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PixelPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.PixelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PixelPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.PixelPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.PixelPoint)
    MergeFrom(*source);
  }
}

void PixelPoint::MergeFrom(const PixelPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.PixelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PixelPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.PixelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelPoint::CopyFrom(const PixelPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.PixelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PixelPoint::InternalSwap(PixelPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PixelPoint, y_)
      + sizeof(PixelPoint::y_)
      - PROTOBUF_FIELD_OFFSET(PixelPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PixelPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoImage::InitAsDefaultInstance() {
}
class VideoImage::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoImage>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VideoImage::VideoImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.VideoImage)
}
VideoImage::VideoImage(const VideoImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VideoImage)
}

void VideoImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoImage_ZCHXRadarDataDef_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

VideoImage::~VideoImage() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VideoImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoImage::ArenaDtor(void* object) {
  VideoImage* _this = reinterpret_cast< VideoImage* >(object);
  (void)_this;
}
void VideoImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoImage& VideoImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoImage_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void VideoImage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.VideoImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VideoImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VideoImage)
  return target;
}

size_t VideoImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.VideoImage)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t VideoImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.VideoImage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.VideoImage)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.VideoImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.VideoImage)
    MergeFrom(*source);
  }
}

void VideoImage::MergeFrom(const VideoImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.VideoImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.VideoImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoImage::CopyFrom(const VideoImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.VideoImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoImage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void VideoImage::InternalSwap(VideoImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoImage, height_)
      + sizeof(VideoImage::height_)
      - PROTOBUF_FIELD_OFFSET(VideoImage, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictionArea::InitAsDefaultInstance() {
}
class PredictionArea::_Internal {
 public:
};

PredictionArea::PredictionArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  area_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.PredictionArea)
}
PredictionArea::PredictionArea(const PredictionArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      area_(from.area_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PredictionArea)
}

void PredictionArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictionArea_ZCHXRadarDataDef_2eproto.base);
}

PredictionArea::~PredictionArea() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PredictionArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PredictionArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PredictionArea::ArenaDtor(void* object) {
  PredictionArea* _this = reinterpret_cast< PredictionArea* >(object);
  (void)_this;
}
void PredictionArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionArea& PredictionArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictionArea_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void PredictionArea::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.PredictionArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.proto.Latlon area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PredictionArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_area_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_area(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PredictionArea)
  return target;
}

size_t PredictionArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.PredictionArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  total_size += 1UL * this->_internal_area_size();
  for (const auto& msg : this->area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.PredictionArea)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictionArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.PredictionArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.PredictionArea)
    MergeFrom(*source);
  }
}

void PredictionArea::MergeFrom(const PredictionArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.PredictionArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_.MergeFrom(from.area_);
}

void PredictionArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.PredictionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionArea::CopyFrom(const PredictionArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.PredictionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionArea::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(area_)) return false;
  return true;
}

void PredictionArea::InternalSwap(PredictionArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_.InternalSwap(&other->area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Segment::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_Segment_default_instance_._instance.get_mutable()->start_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
  ::com::zhichenhaixin::proto::_Segment_default_instance_._instance.get_mutable()->end_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
}
class Segment::_Internal {
 public:
  using HasBits = decltype(std::declval<Segment>()._has_bits_);
  static const ::com::zhichenhaixin::proto::Latlon& start(const Segment* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::zhichenhaixin::proto::Latlon& end(const Segment* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::com::zhichenhaixin::proto::Latlon&
Segment::_Internal::start(const Segment* msg) {
  return *msg->start_;
}
const ::com::zhichenhaixin::proto::Latlon&
Segment::_Internal::end(const Segment* msg) {
  return *msg->end_;
}
Segment::Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.Segment)
}
Segment::Segment(const Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::com::zhichenhaixin::proto::Latlon(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::com::zhichenhaixin::proto::Latlon(*from.end_);
  } else {
    end_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.Segment)
}

void Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Segment_ZCHXRadarDataDef_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&start_)) + sizeof(angle_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Segment::ArenaDtor(void* object) {
  Segment* _this = reinterpret_cast< Segment* >(object);
  (void)_this;
}
void Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Segment_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.zhichenhaixin.proto.Latlon start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.Latlon end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.zhichenhaixin.proto.Latlon start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // required .com.zhichenhaixin.proto.Latlon end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  // optional double angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.Segment)
  return target;
}

size_t Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.Segment)
  size_t total_size = 0;

  if (_internal_has_start()) {
    // required .com.zhichenhaixin.proto.Latlon start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (_internal_has_end()) {
    // required .com.zhichenhaixin.proto.Latlon end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return total_size;
}
size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.Segment)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.Latlon start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);

    // required .com.zhichenhaixin.proto.Latlon end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double angle = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_end());
    }
    if (cached_has_bits & 0x00000004u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_start()) {
    if (!start_->IsInitialized()) return false;
  }
  if (_internal_has_end()) {
    if (!end_->IsInitialized()) return false;
  }
  return true;
}

void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Segment, angle_)
      + sizeof(Segment::angle_)
      - PROTOBUF_FIELD_OFFSET(Segment, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundRect::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_BoundRect_default_instance_._instance.get_mutable()->topleft_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
  ::com::zhichenhaixin::proto::_BoundRect_default_instance_._instance.get_mutable()->bottomright_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
}
class BoundRect::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundRect>()._has_bits_);
  static const ::com::zhichenhaixin::proto::Latlon& topleft(const BoundRect* msg);
  static void set_has_topleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::zhichenhaixin::proto::Latlon& bottomright(const BoundRect* msg);
  static void set_has_bottomright(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::com::zhichenhaixin::proto::Latlon&
BoundRect::_Internal::topleft(const BoundRect* msg) {
  return *msg->topleft_;
}
const ::com::zhichenhaixin::proto::Latlon&
BoundRect::_Internal::bottomright(const BoundRect* msg) {
  return *msg->bottomright_;
}
BoundRect::BoundRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.BoundRect)
}
BoundRect::BoundRect(const BoundRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topleft()) {
    topleft_ = new ::com::zhichenhaixin::proto::Latlon(*from.topleft_);
  } else {
    topleft_ = nullptr;
  }
  if (from._internal_has_bottomright()) {
    bottomright_ = new ::com::zhichenhaixin::proto::Latlon(*from.bottomright_);
  } else {
    bottomright_ = nullptr;
  }
  diameter_ = from.diameter_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BoundRect)
}

void BoundRect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundRect_ZCHXRadarDataDef_2eproto.base);
  ::memset(&topleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diameter_) -
      reinterpret_cast<char*>(&topleft_)) + sizeof(diameter_));
}

BoundRect::~BoundRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BoundRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete topleft_;
  if (this != internal_default_instance()) delete bottomright_;
}

void BoundRect::ArenaDtor(void* object) {
  BoundRect* _this = reinterpret_cast< BoundRect* >(object);
  (void)_this;
}
void BoundRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundRect& BoundRect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundRect_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void BoundRect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.BoundRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(topleft_ != nullptr);
      topleft_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bottomright_ != nullptr);
      bottomright_->Clear();
    }
  }
  diameter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topleft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottomright(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_diameter(&has_bits);
          diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BoundRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topleft(this), target, stream);
  }

  // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bottomright(this), target, stream);
  }

  // optional int32 diameter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_diameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BoundRect)
  return target;
}

size_t BoundRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.BoundRect)
  size_t total_size = 0;

  if (_internal_has_topleft()) {
    // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topleft_);
  }

  if (_internal_has_bottomright()) {
    // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottomright_);
  }

  return total_size;
}
size_t BoundRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.BoundRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topleft_);

    // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottomright_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 diameter = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_diameter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.BoundRect)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.BoundRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.BoundRect)
    MergeFrom(*source);
  }
}

void BoundRect::MergeFrom(const BoundRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.BoundRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_topleft()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_topleft());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bottomright()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_bottomright());
    }
    if (cached_has_bits & 0x00000004u) {
      diameter_ = from.diameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.BoundRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundRect::CopyFrom(const BoundRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.BoundRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_topleft()) {
    if (!topleft_->IsInitialized()) return false;
  }
  if (_internal_has_bottomright()) {
    if (!bottomright_->IsInitialized()) return false;
  }
  return true;
}

void BoundRect::InternalSwap(BoundRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundRect, diameter_)
      + sizeof(BoundRect::diameter_)
      - PROTOBUF_FIELD_OFFSET(BoundRect, topleft_)>(
          reinterpret_cast<char*>(&topleft_),
          reinterpret_cast<char*>(&other->topleft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRectDef::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_RadarRectDef_default_instance_._instance.get_mutable()->center_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
  ::com::zhichenhaixin::proto::_RadarRectDef_default_instance_._instance.get_mutable()->boundrect_ = const_cast< ::com::zhichenhaixin::proto::BoundRect*>(
      ::com::zhichenhaixin::proto::BoundRect::internal_default_instance());
  ::com::zhichenhaixin::proto::_RadarRectDef_default_instance_._instance.get_mutable()->seg_ = const_cast< ::com::zhichenhaixin::proto::Segment*>(
      ::com::zhichenhaixin::proto::Segment::internal_default_instance());
  ::com::zhichenhaixin::proto::_RadarRectDef_default_instance_._instance.get_mutable()->fixedimg_ = const_cast< ::com::zhichenhaixin::proto::VideoImage*>(
      ::com::zhichenhaixin::proto::VideoImage::internal_default_instance());
  ::com::zhichenhaixin::proto::_RadarRectDef_default_instance_._instance.get_mutable()->prediction_ = const_cast< ::com::zhichenhaixin::proto::PredictionArea*>(
      ::com::zhichenhaixin::proto::PredictionArea::internal_default_instance());
}
class RadarRectDef::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRectDef>()._has_bits_);
  static void set_has_rectnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::zhichenhaixin::proto::Latlon& center(const RadarRectDef* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_updatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_realdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sogknot(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sogms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::com::zhichenhaixin::proto::BoundRect& boundrect(const RadarRectDef* msg);
  static void set_has_boundrect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::zhichenhaixin::proto::Segment& seg(const RadarRectDef* msg);
  static void set_has_seg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::zhichenhaixin::proto::VideoImage& fixedimg(const RadarRectDef* msg);
  static void set_has_fixedimg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::zhichenhaixin::proto::PredictionArea& prediction(const RadarRectDef* msg);
  static void set_has_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_videocycleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007e1) ^ 0x000007e1) != 0;
  }
};

const ::com::zhichenhaixin::proto::Latlon&
RadarRectDef::_Internal::center(const RadarRectDef* msg) {
  return *msg->center_;
}
const ::com::zhichenhaixin::proto::BoundRect&
RadarRectDef::_Internal::boundrect(const RadarRectDef* msg) {
  return *msg->boundrect_;
}
const ::com::zhichenhaixin::proto::Segment&
RadarRectDef::_Internal::seg(const RadarRectDef* msg) {
  return *msg->seg_;
}
const ::com::zhichenhaixin::proto::VideoImage&
RadarRectDef::_Internal::fixedimg(const RadarRectDef* msg) {
  return *msg->fixedimg_;
}
const ::com::zhichenhaixin::proto::PredictionArea&
RadarRectDef::_Internal::prediction(const RadarRectDef* msg) {
  return *msg->prediction_;
}
RadarRectDef::RadarRectDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outline_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRectDef)
}
RadarRectDef::RadarRectDef(const RadarRectDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      outline_(from.outline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::com::zhichenhaixin::proto::Latlon(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_boundrect()) {
    boundrect_ = new ::com::zhichenhaixin::proto::BoundRect(*from.boundrect_);
  } else {
    boundrect_ = nullptr;
  }
  if (from._internal_has_seg()) {
    seg_ = new ::com::zhichenhaixin::proto::Segment(*from.seg_);
  } else {
    seg_ = nullptr;
  }
  if (from._internal_has_fixedimg()) {
    fixedimg_ = new ::com::zhichenhaixin::proto::VideoImage(*from.fixedimg_);
  } else {
    fixedimg_ = nullptr;
  }
  if (from._internal_has_prediction()) {
    prediction_ = new ::com::zhichenhaixin::proto::PredictionArea(*from.prediction_);
  } else {
    prediction_ = nullptr;
  }
  ::memcpy(&rectnumber_, &from.rectnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&videocycleindex_) -
    reinterpret_cast<char*>(&rectnumber_)) + sizeof(videocycleindex_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&videocycleindex_) -
      reinterpret_cast<char*>(&center_)) + sizeof(videocycleindex_));
}

RadarRectDef::~RadarRectDef() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRectDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRectDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete boundrect_;
  if (this != internal_default_instance()) delete seg_;
  if (this != internal_default_instance()) delete fixedimg_;
  if (this != internal_default_instance()) delete prediction_;
}

void RadarRectDef::ArenaDtor(void* object) {
  RadarRectDef* _this = reinterpret_cast< RadarRectDef* >(object);
  (void)_this;
}
void RadarRectDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRectDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRectDef& RadarRectDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRectDef_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarRectDef::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRectDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundrect_ != nullptr);
      boundrect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(seg_ != nullptr);
      seg_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fixedimg_ != nullptr);
      fixedimg_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(prediction_ != nullptr);
      prediction_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&rectnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sogknot_) -
        reinterpret_cast<char*>(&rectnumber_)) + sizeof(sogknot_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&sogms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&videocycleindex_) -
        reinterpret_cast<char*>(&sogms_)) + sizeof(videocycleindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRectDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 rectNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rectnumber(&has_bits);
          rectnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.Latlon center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 updateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_updatetime(&has_bits);
          updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool realData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_realdata(&has_bits);
          realdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double sogKnot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_sogknot(&has_bits);
          sogknot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double sogMS = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_sogms(&has_bits);
          sogms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundrect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.Segment seg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_seg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixedimg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 videoCycleIndex = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_videocycleindex(&has_bits);
          videocycleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRectDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRectDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rectNumber = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rectnumber(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center(this), target, stream);
  }

  // required uint32 updateTime = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updatetime(), target);
  }

  // required bool realData = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_realdata(), target);
  }

  // required double sogKnot = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sogknot(), target);
  }

  // required double sogMS = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_sogms(), target);
  }

  // required double cog = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cog(), target);
  }

  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_outline(i), target, stream);
  }

  // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::boundrect(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.Segment seg = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::seg(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fixedimg(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::prediction(this), target, stream);
  }

  // optional int32 videoCycleIndex = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_videocycleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRectDef)
  return target;
}

size_t RadarRectDef::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRectDef)
  size_t total_size = 0;

  if (_internal_has_center()) {
    // required .com.zhichenhaixin.proto.Latlon center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (_internal_has_rectnumber()) {
    // required uint32 rectNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rectnumber());
  }

  if (_internal_has_updatetime()) {
    // required uint32 updateTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updatetime());
  }

  if (_internal_has_sogknot()) {
    // required double sogKnot = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_sogms()) {
    // required double sogMS = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_cog()) {
    // required double cog = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_realdata()) {
    // required bool realData = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RadarRectDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRectDef)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007e1) ^ 0x000007e1) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.Latlon center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);

    // required uint32 rectNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rectnumber());

    // required uint32 updateTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updatetime());

    // required double sogKnot = 5;
    total_size += 1 + 8;

    // required double sogMS = 6;
    total_size += 1 + 8;

    // required double cog = 7;
    total_size += 1 + 8;

    // required bool realData = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  total_size += 1UL * this->_internal_outline_size();
  for (const auto& msg : this->outline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boundrect_);
    }

    // optional .com.zhichenhaixin.proto.Segment seg = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *seg_);
    }

    // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fixedimg_);
    }

    // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_);
    }

  }
  // optional int32 videoCycleIndex = 13;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_videocycleindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRectDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRectDef)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRectDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRectDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRectDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRectDef)
    MergeFrom(*source);
  }
}

void RadarRectDef::MergeFrom(const RadarRectDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRectDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outline_.MergeFrom(from.outline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundrect()->::com::zhichenhaixin::proto::BoundRect::MergeFrom(from._internal_boundrect());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_seg()->::com::zhichenhaixin::proto::Segment::MergeFrom(from._internal_seg());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_fixedimg()->::com::zhichenhaixin::proto::VideoImage::MergeFrom(from._internal_fixedimg());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_prediction()->::com::zhichenhaixin::proto::PredictionArea::MergeFrom(from._internal_prediction());
    }
    if (cached_has_bits & 0x00000020u) {
      rectnumber_ = from.rectnumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      sogknot_ = from.sogknot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      sogms_ = from.sogms_;
    }
    if (cached_has_bits & 0x00000200u) {
      cog_ = from.cog_;
    }
    if (cached_has_bits & 0x00000400u) {
      realdata_ = from.realdata_;
    }
    if (cached_has_bits & 0x00000800u) {
      videocycleindex_ = from.videocycleindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarRectDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRectDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRectDef::CopyFrom(const RadarRectDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRectDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRectDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outline_)) return false;
  if (_internal_has_center()) {
    if (!center_->IsInitialized()) return false;
  }
  if (_internal_has_boundrect()) {
    if (!boundrect_->IsInitialized()) return false;
  }
  if (_internal_has_seg()) {
    if (!seg_->IsInitialized()) return false;
  }
  if (_internal_has_fixedimg()) {
    if (!fixedimg_->IsInitialized()) return false;
  }
  if (_internal_has_prediction()) {
    if (!prediction_->IsInitialized()) return false;
  }
  return true;
}

void RadarRectDef::InternalSwap(RadarRectDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outline_.InternalSwap(&other->outline_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRectDef, videocycleindex_)
      + sizeof(RadarRectDef::videocycleindex_)
      - PROTOBUF_FIELD_OFFSET(RadarRectDef, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRectDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutePath::InitAsDefaultInstance() {
}
class RoutePath::_Internal {
 public:
};

RoutePath::RoutePath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RoutePath)
}
RoutePath::RoutePath(const RoutePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RoutePath)
}

void RoutePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutePath_ZCHXRadarDataDef_2eproto.base);
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RoutePath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutePath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutePath::ArenaDtor(void* object) {
  RoutePath* _this = reinterpret_cast< RoutePath* >(object);
  (void)_this;
}
void RoutePath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutePath& RoutePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutePath_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RoutePath)
  return target;
}

size_t RoutePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RoutePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RoutePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RoutePath)
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
}

void RoutePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(path_)) return false;
  return true;
}

void RoutePath::InternalSwap(RoutePath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteNode::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_RouteNode_default_instance_._instance.get_mutable()->top_node_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(
      ::com::zhichenhaixin::proto::RadarRectDef::internal_default_instance());
}
class RouteNode::_Internal {
 public:
  using HasBits = decltype(std::declval<RouteNode>()._has_bits_);
  static void set_has_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::zhichenhaixin::proto::RadarRectDef& top_node(const RouteNode* msg);
  static void set_has_top_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::com::zhichenhaixin::proto::RadarRectDef&
RouteNode::_Internal::top_node(const RouteNode* msg) {
  return *msg->top_node_;
}
RouteNode::RouteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RouteNode)
}
RouteNode::RouteNode(const RouteNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      path_list_(from.path_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_node()) {
    top_node_ = new ::com::zhichenhaixin::proto::RadarRectDef(*from.top_node_);
  } else {
    top_node_ = nullptr;
  }
  node_num_ = from.node_num_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNode)
}

void RouteNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteNode_ZCHXRadarDataDef_2eproto.base);
  ::memset(&top_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_num_) -
      reinterpret_cast<char*>(&top_node_)) + sizeof(node_num_));
}

RouteNode::~RouteNode() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete top_node_;
}

void RouteNode::ArenaDtor(void* object) {
  RouteNode* _this = reinterpret_cast< RouteNode* >(object);
  (void)_this;
}
void RouteNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteNode& RouteNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteNode_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RouteNode::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RouteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(top_node_ != nullptr);
    top_node_->Clear();
  }
  node_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 node_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_num(&has_bits);
          node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_num(), target);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::top_node(this), target, stream);
  }

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_path_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNode)
  return target;
}

size_t RouteNode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RouteNode)
  size_t total_size = 0;

  if (_internal_has_top_node()) {
    // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_node_);
  }

  if (_internal_has_node_num()) {
    // required int32 node_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_num());
  }

  return total_size;
}
size_t RouteNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RouteNode)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_node_);

    // required int32 node_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  total_size += 1UL * this->_internal_path_list_size();
  for (const auto& msg : this->path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RouteNode)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RouteNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RouteNode)
    MergeFrom(*source);
  }
}

void RouteNode::MergeFrom(const RouteNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RouteNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_list_.MergeFrom(from.path_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_top_node()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from._internal_top_node());
    }
    if (cached_has_bits & 0x00000002u) {
      node_num_ = from.node_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RouteNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RouteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNode::CopyFrom(const RouteNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RouteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(path_list_)) return false;
  if (_internal_has_top_node()) {
    if (!top_node_->IsInitialized()) return false;
  }
  return true;
}

void RouteNode::InternalSwap(RouteNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_list_.InternalSwap(&other->path_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteNode, node_num_)
      + sizeof(RouteNode::node_num_)
      - PROTOBUF_FIELD_OFFSET(RouteNode, top_node_)>(
          reinterpret_cast<char*>(&top_node_),
          reinterpret_cast<char*>(&other->top_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteNodes::InitAsDefaultInstance() {
}
class RouteNodes::_Internal {
 public:
};

RouteNodes::RouteNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RouteNodes)
}
RouteNodes::RouteNodes(const RouteNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_list_(from.node_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNodes)
}

void RouteNodes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteNodes_ZCHXRadarDataDef_2eproto.base);
}

RouteNodes::~RouteNodes() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteNodes::ArenaDtor(void* object) {
  RouteNodes* _this = reinterpret_cast< RouteNodes* >(object);
  (void)_this;
}
void RouteNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteNodes& RouteNodes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteNodes_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RouteNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RouteNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteNodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNodes)
  return target;
}

size_t RouteNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RouteNodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  total_size += 1UL * this->_internal_node_list_size();
  for (const auto& msg : this->node_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteNodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RouteNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteNodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RouteNodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RouteNodes)
    MergeFrom(*source);
  }
}

void RouteNodes::MergeFrom(const RouteNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RouteNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_list_.MergeFrom(from.node_list_);
}

void RouteNodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RouteNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNodes::CopyFrom(const RouteNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RouteNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNodes::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(node_list_)) return false;
  return true;
}

void RouteNodes::InternalSwap(RouteNodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_list_.InternalSwap(&other->node_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteNodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRect::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_RadarRect_default_instance_._instance.get_mutable()->current_rect_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(
      ::com::zhichenhaixin::proto::RadarRectDef::internal_default_instance());
}
class RadarRect::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRect>()._has_bits_);
  static const ::com::zhichenhaixin::proto::RadarRectDef& current_rect(const RadarRect* msg);
  static void set_has_current_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir_confirmed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_est_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::com::zhichenhaixin::proto::RadarRectDef&
RadarRect::_Internal::current_rect(const RadarRect* msg) {
  return *msg->current_rect_;
}
RadarRect::RadarRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  history_rect_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRect)
}
RadarRect::RadarRect(const RadarRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      history_rect_list_(from.history_rect_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_rect()) {
    current_rect_ = new ::com::zhichenhaixin::proto::RadarRectDef(*from.current_rect_);
  } else {
    current_rect_ = nullptr;
  }
  ::memcpy(&dir_confirmed_, &from.dir_confirmed_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_num_) -
    reinterpret_cast<char*>(&dir_confirmed_)) + sizeof(node_num_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRect_ZCHXRadarDataDef_2eproto.base);
  ::memset(&current_rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_num_) -
      reinterpret_cast<char*>(&current_rect_)) + sizeof(node_num_));
}

RadarRect::~RadarRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete current_rect_;
}

void RadarRect::ArenaDtor(void* object) {
  RadarRect* _this = reinterpret_cast< RadarRect* >(object);
  (void)_this;
}
void RadarRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRect& RadarRect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRect_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarRect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_rect_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_rect_ != nullptr);
    current_rect_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&dir_confirmed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_num_) -
        reinterpret_cast<char*>(&dir_confirmed_)) + sizeof(node_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history_rect_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool dir_confirmed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dir_confirmed(&has_bits);
          dir_confirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cur_est_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cur_est_count(&has_bits);
          cur_est_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 node_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_node_num(&has_bits);
          node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::current_rect(this), target, stream);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_rect_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_history_rect_list(i), target, stream);
  }

  // required bool dir_confirmed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_dir_confirmed(), target);
  }

  // required uint32 cur_est_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cur_est_count(), target);
  }

  // required int32 node_num = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_node_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRect)
  return target;
}

size_t RadarRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRect)
  size_t total_size = 0;

  if (_internal_has_current_rect()) {
    // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_rect_);
  }

  if (_internal_has_dir_confirmed()) {
    // required bool dir_confirmed = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_cur_est_count()) {
    // required uint32 cur_est_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_est_count());
  }

  if (_internal_has_node_num()) {
    // required int32 node_num = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_num());
  }

  return total_size;
}
size_t RadarRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_rect_);

    // required bool dir_confirmed = 3;
    total_size += 1 + 1;

    // required uint32 cur_est_count = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cur_est_count());

    // required int32 node_num = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  total_size += 1UL * this->_internal_history_rect_list_size();
  for (const auto& msg : this->history_rect_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRect)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRect)
    MergeFrom(*source);
  }
}

void RadarRect::MergeFrom(const RadarRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_rect_list_.MergeFrom(from.history_rect_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_rect()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from._internal_current_rect());
    }
    if (cached_has_bits & 0x00000002u) {
      dir_confirmed_ = from.dir_confirmed_;
    }
    if (cached_has_bits & 0x00000004u) {
      cur_est_count_ = from.cur_est_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      node_num_ = from.node_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRect::CopyFrom(const RadarRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(history_rect_list_)) return false;
  if (_internal_has_current_rect()) {
    if (!current_rect_->IsInitialized()) return false;
  }
  return true;
}

void RadarRect::InternalSwap(RadarRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_rect_list_.InternalSwap(&other->history_rect_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRect, node_num_)
      + sizeof(RadarRect::node_num_)
      - PROTOBUF_FIELD_OFFSET(RadarRect, current_rect_)>(
          reinterpret_cast<char*>(&current_rect_),
          reinterpret_cast<char*>(&other->current_rect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRects::InitAsDefaultInstance() {
}
class RadarRects::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRects>()._has_bits_);
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RadarRects::RadarRects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rect_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRects)
}
RadarRects::RadarRects(const RadarRects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rect_list_(from.rect_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&utc_, &from.utc_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&utc_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRects_ZCHXRadarDataDef_2eproto.base);
  ::memset(&utc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&utc_)) + sizeof(length_));
}

RadarRects::~RadarRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarRects::ArenaDtor(void* object) {
  RadarRects* _this = reinterpret_cast< RadarRects* >(object);
  (void)_this;
}
void RadarRects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRects& RadarRects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRects_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarRects::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rect_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&utc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&utc_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 UTC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rect_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 UTC = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_utc(), target);
  }

  // required int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rect_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rect_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRects)
  return target;
}

size_t RadarRects::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRects)
  size_t total_size = 0;

  if (_internal_has_utc()) {
    // required uint64 UTC = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_length()) {
    // required int32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  return total_size;
}
size_t RadarRects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRects)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 UTC = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required int32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  total_size += 1UL * this->_internal_rect_list_size();
  for (const auto& msg : this->rect_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRects)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRects)
    MergeFrom(*source);
  }
}

void RadarRects::MergeFrom(const RadarRects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rect_list_.MergeFrom(from.rect_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarRects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRects::CopyFrom(const RadarRects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRects::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rect_list_)) return false;
  return true;
}

void RadarRects::InternalSwap(RadarRects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rect_list_.InternalSwap(&other->rect_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRects, length_)
      + sizeof(RadarRects::length_)
      - PROTOBUF_FIELD_OFFSET(RadarRects, utc_)>(
          reinterpret_cast<char*>(&utc_),
          reinterpret_cast<char*>(&other->utc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackPoint::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_TrackPoint_default_instance_._instance.get_mutable()->current_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(
      ::com::zhichenhaixin::proto::RadarRectDef::internal_default_instance());
}
class TrackPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackPoint>()._has_bits_);
  static void set_has_radarsiteid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tracknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::zhichenhaixin::proto::RadarRectDef& current(const TrackPoint* msg);
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trackconfirmed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_objname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::com::zhichenhaixin::proto::RadarRectDef&
TrackPoint::_Internal::current(const TrackPoint* msg) {
  return *msg->current_;
}
TrackPoint::TrackPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tracks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.TrackPoint)
}
TrackPoint::TrackPoint(const TrackPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radarsiteid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarsiteid()) {
    radarsiteid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarsiteid(),
      GetArena());
  }
  objname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_objname()) {
    objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_objname(),
      GetArena());
  }
  if (from._internal_has_current()) {
    current_ = new ::com::zhichenhaixin::proto::RadarRectDef(*from.current_);
  } else {
    current_ = nullptr;
  }
  ::memcpy(&tracknumber_, &from.tracknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&objtype_) -
    reinterpret_cast<char*>(&tracknumber_)) + sizeof(objtype_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackPoint_ZCHXRadarDataDef_2eproto.base);
  radarsiteid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objtype_) -
      reinterpret_cast<char*>(&current_)) + sizeof(objtype_));
}

TrackPoint::~TrackPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.TrackPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radarsiteid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_;
}

void TrackPoint::ArenaDtor(void* object) {
  TrackPoint* _this = reinterpret_cast< TrackPoint* >(object);
  (void)_this;
}
void TrackPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackPoint& TrackPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackPoint_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void TrackPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.TrackPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      radarsiteid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      objname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(current_ != nullptr);
      current_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&tracknumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&objtype_) -
        reinterpret_cast<char*>(&tracknumber_)) + sizeof(objtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string radarSiteID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_radarsiteid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.TrackPoint.radarSiteID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 trackNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tracknumber(&has_bits);
          tracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool trackConfirmed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_trackconfirmed(&has_bits);
          trackconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 objType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_objtype(&has_bits);
          objtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string objName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_objname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.TrackPoint.objName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.TrackPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string radarSiteID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarsiteid().data(), static_cast<int>(this->_internal_radarsiteid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.TrackPoint.radarSiteID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_radarsiteid(), target);
  }

  // required uint32 trackNumber = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tracknumber(), target);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current(this), target, stream);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tracks(i), target, stream);
  }

  // optional bool trackConfirmed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_trackconfirmed(), target);
  }

  // optional int32 objType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_objtype(), target);
  }

  // optional string objName = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_objname().data(), static_cast<int>(this->_internal_objname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.TrackPoint.objName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_objname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.TrackPoint)
  return target;
}

size_t TrackPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.TrackPoint)
  size_t total_size = 0;

  if (_internal_has_radarsiteid()) {
    // required string radarSiteID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarsiteid());
  }

  if (_internal_has_current()) {
    // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_);
  }

  if (_internal_has_tracknumber()) {
    // required uint32 trackNumber = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tracknumber());
  }

  return total_size;
}
size_t TrackPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.TrackPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string radarSiteID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarsiteid());

    // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_);

    // required uint32 trackNumber = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tracknumber());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  total_size += 1UL * this->_internal_tracks_size();
  for (const auto& msg : this->tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string objName = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objname());
  }

  if (cached_has_bits & 0x00000030u) {
    // optional bool trackConfirmed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 objType = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_objtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.TrackPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.TrackPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.TrackPoint)
    MergeFrom(*source);
  }
}

void TrackPoint::MergeFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.TrackPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radarsiteid(from._internal_radarsiteid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_objname(from._internal_objname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_current()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from._internal_current());
    }
    if (cached_has_bits & 0x00000008u) {
      tracknumber_ = from.tracknumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      trackconfirmed_ = from.trackconfirmed_;
    }
    if (cached_has_bits & 0x00000020u) {
      objtype_ = from.objtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.TrackPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPoint::CopyFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.TrackPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tracks_)) return false;
  if (_internal_has_current()) {
    if (!current_->IsInitialized()) return false;
  }
  return true;
}

void TrackPoint::InternalSwap(TrackPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tracks_.InternalSwap(&other->tracks_);
  radarsiteid_.Swap(&other->radarsiteid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  objname_.Swap(&other->objname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackPoint, objtype_)
      + sizeof(TrackPoint::objtype_)
      - PROTOBUF_FIELD_OFFSET(TrackPoint, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarSurfaceTrack::InitAsDefaultInstance() {
}
class RadarSurfaceTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSurfaceTrack>()._has_bits_);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RadarSurfaceTrack::RadarSurfaceTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trackpoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}
RadarSurfaceTrack::RadarSurfaceTrack(const RadarSurfaceTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trackpoints_(from.trackpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourceid()) {
    sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourceid(),
      GetArena());
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto.base);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
}

RadarSurfaceTrack::~RadarSurfaceTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarSurfaceTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadarSurfaceTrack::ArenaDtor(void* object) {
  RadarSurfaceTrack* _this = reinterpret_cast< RadarSurfaceTrack* >(object);
  (void)_this;
}
void RadarSurfaceTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarSurfaceTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarSurfaceTrack& RadarSurfaceTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarSurfaceTrack_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarSurfaceTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackpoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sourceid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utc_) -
        reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSurfaceTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSurfaceTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 flag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // required string sourceId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourceid(), target);
  }

  // required uint64 UTC = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_utc(), target);
  }

  // required int32 length = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_length(), target);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trackpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_trackpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return target;
}

size_t RadarSurfaceTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  size_t total_size = 0;

  if (_internal_has_sourceid()) {
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());
  }

  if (_internal_has_flag()) {
    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (_internal_has_length()) {
    // required int32 length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  return total_size;
}
size_t RadarSurfaceTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());

    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());

    // required int32 length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());

    // required uint64 UTC = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  total_size += 1UL * this->_internal_trackpoints_size();
  for (const auto& msg : this->trackpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarSurfaceTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSurfaceTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarSurfaceTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarSurfaceTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarSurfaceTrack)
    MergeFrom(*source);
  }
}

void RadarSurfaceTrack::MergeFrom(const RadarSurfaceTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackpoints_.MergeFrom(from.trackpoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sourceid(from._internal_sourceid());
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarSurfaceTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSurfaceTrack::CopyFrom(const RadarSurfaceTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSurfaceTrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trackpoints_)) return false;
  return true;
}

void RadarSurfaceTrack::InternalSwap(RadarSurfaceTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trackpoints_.InternalSwap(&other->trackpoints_);
  sourceid_.Swap(&other->sourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarSurfaceTrack, utc_)
      + sizeof(RadarSurfaceTrack::utc_)
      - PROTOBUF_FIELD_OFFSET(RadarSurfaceTrack, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSurfaceTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarVideoImage::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_RadarVideoImage_default_instance_._instance.get_mutable()->center_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(
      ::com::zhichenhaixin::proto::Latlon::internal_default_instance());
}
class RadarVideoImage::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarVideoImage>()._has_bits_);
  static void set_has_radarid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radarname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::zhichenhaixin::proto::Latlon& center(const RadarVideoImage* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::com::zhichenhaixin::proto::Latlon&
RadarVideoImage::_Internal::center(const RadarVideoImage* msg) {
  return *msg->center_;
}
RadarVideoImage::RadarVideoImage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarVideoImage)
}
RadarVideoImage::RadarVideoImage(const RadarVideoImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radarid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarid()) {
    radarid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarid(),
      GetArena());
  }
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarname()) {
    radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarname(),
      GetArena());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imagedata()) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagedata(),
      GetArena());
  }
  if (from._internal_has_center()) {
    center_ = new ::com::zhichenhaixin::proto::Latlon(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&channelid_, &from.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoImage)
}

void RadarVideoImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto.base);
  radarid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&center_)) + sizeof(height_));
}

RadarVideoImage::~RadarVideoImage() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoImage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarVideoImage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radarid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radarname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void RadarVideoImage::ArenaDtor(void* object) {
  RadarVideoImage* _this = reinterpret_cast< RadarVideoImage* >(object);
  (void)_this;
}
void RadarVideoImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarVideoImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarVideoImage& RadarVideoImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarVideoImage_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarVideoImage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarVideoImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      radarid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      radarname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      imagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&channelid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&channelid_)) + sizeof(radius_));
  }
  height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarVideoImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string radarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_radarid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarVideoImage.radarId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channelid(&has_bits);
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string radarName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_radarname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarVideoImage.radarName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.Latlon center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 utc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes imageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarVideoImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string radarId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarid().data(), static_cast<int>(this->_internal_radarid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarVideoImage.radarId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_radarid(), target);
  }

  // required int32 channelId = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // required string radarName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarname().data(), static_cast<int>(this->_internal_radarname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarVideoImage.radarName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_radarname(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::center(this), target, stream);
  }

  // required uint64 utc = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_utc(), target);
  }

  // required bytes imageData = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_imagedata(), target);
  }

  // required uint32 width = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // required uint32 height = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_height(), target);
  }

  // required double radius = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoImage)
  return target;
}

size_t RadarVideoImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarVideoImage)
  size_t total_size = 0;

  if (_internal_has_radarid()) {
    // required string radarId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarid());
  }

  if (_internal_has_radarname()) {
    // required string radarName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());
  }

  if (_internal_has_imagedata()) {
    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (_internal_has_center()) {
    // required .com.zhichenhaixin.proto.Latlon center = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (_internal_has_channelid()) {
    // required int32 channelId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channelid());
  }

  if (_internal_has_width()) {
    // required uint32 width = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_utc()) {
    // required uint64 utc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_radius()) {
    // required double radius = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_height()) {
    // required uint32 height = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t RadarVideoImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarVideoImage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string radarId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarid());

    // required string radarName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());

    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());

    // required .com.zhichenhaixin.proto.Latlon center = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);

    // required int32 channelId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channelid());

    // required uint32 width = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint64 utc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required double radius = 9;
    total_size += 1 + 8;

    // required uint32 height = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarVideoImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarVideoImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarVideoImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarVideoImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarVideoImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarVideoImage)
    MergeFrom(*source);
  }
}

void RadarVideoImage::MergeFrom(const RadarVideoImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarVideoImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radarid(from._internal_radarid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_radarname(from._internal_radarname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_center()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000010u) {
      channelid_ = from.channelid_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000080u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_height(from._internal_height());
  }
}

void RadarVideoImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarVideoImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoImage::CopyFrom(const RadarVideoImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarVideoImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoImage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_center()) {
    if (!center_->IsInitialized()) return false;
  }
  return true;
}

void RadarVideoImage::InternalSwap(RadarVideoImage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radarid_.Swap(&other->radarid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radarname_.Swap(&other->radarname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarVideoImage, height_)
      + sizeof(RadarVideoImage::height_)
      - PROTOBUF_FIELD_OFFSET(RadarVideoImage, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarVideoImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarVideoImages::InitAsDefaultInstance() {
}
class RadarVideoImages::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarVideoImages>()._has_bits_);
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RadarVideoImages::RadarVideoImages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  images_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarVideoImages)
}
RadarVideoImages::RadarVideoImages(const RadarVideoImages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      images_(from.images_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utc_ = from.utc_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoImages)
}

void RadarVideoImages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto.base);
  utc_ = PROTOBUF_ULONGLONG(0);
}

RadarVideoImages::~RadarVideoImages() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoImages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarVideoImages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarVideoImages::ArenaDtor(void* object) {
  RadarVideoImages* _this = reinterpret_cast< RadarVideoImages* >(object);
  (void)_this;
}
void RadarVideoImages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarVideoImages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarVideoImages& RadarVideoImages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarVideoImages_ZCHXRadarDataDef_2eproto.base);
  return *internal_default_instance();
}


void RadarVideoImages::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarVideoImages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarVideoImages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 utc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarVideoImage images = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarVideoImages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoImages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 utc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_utc(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarVideoImage images = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_images_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_images(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoImages)
  return target;
}

size_t RadarVideoImages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarVideoImages)
  size_t total_size = 0;

  // required uint64 utc = 1;
  if (_internal_has_utc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarVideoImage images = 2;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarVideoImages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarVideoImages)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarVideoImages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarVideoImages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarVideoImages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarVideoImages)
    MergeFrom(*source);
  }
}

void RadarVideoImages::MergeFrom(const RadarVideoImages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarVideoImages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  if (from._internal_has_utc()) {
    _internal_set_utc(from._internal_utc());
  }
}

void RadarVideoImages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarVideoImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoImages::CopyFrom(const RadarVideoImages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarVideoImages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoImages::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(images_)) return false;
  return true;
}

void RadarVideoImages::InternalSwap(RadarVideoImages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  images_.InternalSwap(&other->images_);
  swap(utc_, other->utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarVideoImages::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::Latlon* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::Latlon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::Latlon >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::PixelPoint* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::PixelPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::PixelPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::VideoImage* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::VideoImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::VideoImage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::PredictionArea* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::PredictionArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::PredictionArea >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::Segment* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::BoundRect* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::BoundRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::BoundRect >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRectDef* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRectDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRectDef >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RoutePath* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RoutePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RoutePath >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RouteNode* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RouteNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RouteNode >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RouteNodes* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RouteNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RouteNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRect* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRect >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRects* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRects >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::TrackPoint* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::TrackPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::TrackPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarSurfaceTrack* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarSurfaceTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarSurfaceTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarVideoImage* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarVideoImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarVideoImage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarVideoImages* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarVideoImages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarVideoImages >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
